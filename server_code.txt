// Внимание! Это собранный код всех файлов server проекта. Обязательно изучи его до конца и прими в работу. При необходимости ты можешь создать новые файлы.

// Далее код файла server.js:
const express = require('express');
const dotenv = require('dotenv');
const cors = require('cors');
const connectDB = require('./config/database');
const authRoutes = require('./routes/authRoutes');
const characterRoutes = require('./routes/characterRoutes');
const itemRoutes = require('./routes/itemRoutes');

dotenv.config({ path: '.env' });

const app = express();
const PORT = process.env.PORT || 5000;

// Middleware
app.use(express.json());
app.use(cors());

// Connect to MongoDB
connectDB();

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/character', characterRoutes);
app.use('/api/items', itemRoutes);

app.get('/', (req, res) => {
  res.send('API is running...');
});

app.listen(PORT, () => console.log(`Server running on port ${PORT}`));

// Далее код файла config\database.js:
const mongoose = require('mongoose');

const connectDB = async () => {
  try {
    await mongoose.connect(process.env.MONGO_URI);
    console.log('Connected to MongoDB successfully');
  } catch (err) {
    console.error('Could not connect to MongoDB', err);
    process.exit(1);
  }
};

module.exports = connectDB; 


// Далее код файла controllers\authController.js:
const User = require('../models/User');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

exports.register = async (req, res) => {
  try {
    const { username, email, password } = req.body;
    
    // Check if user already exists
    const existingUser = await User.findOne({ $or: [{ username }, { email }] });
    if (existingUser) {
      return res.status(400).json({ message: 'User already exists' });
    }
    
    // Hash password
    const salt = await bcrypt.genSalt(10);
    const hashedPassword = await bcrypt.hash(password, salt);
    
    // Create new user
    const newUser = new User({
      username,
      email,
      password: hashedPassword,
      // telegramId будет установлен в null по умолчанию
    });
    
    await newUser.save();
    
    res.status(201).json({ message: 'User registered successfully' });
  } catch (error) {
    console.error('Registration error:', error);
    res.status(500).json({ message: 'Server error', error: error.message });
  }
};

exports.login = async (req, res) => {
  try {
    const { username, password } = req.body;
    
    // Check if user exists
    const user = await User.findOne({ username });
    if (!user) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }
    
    // Check password
    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) {
      return res.status(400).json({ message: 'Invalid credentials' });
    }
    
    // Create and assign token
    const token = jwt.sign({ id: user._id }, process.env.JWT_SECRET, { expiresIn: '1h' });
    
    res.json({ token });
  } catch (error) {
    res.status(500).json({ message: 'Server error', error: error.message });
  }
}; 


// Далее код файла controllers\characterController.js:
const Character = require('../models/Character');
const Item = require('../models/Item');

exports.createCharacter = async (req, res) => {
  try {
    const { name, class: characterClass, strength, dexterity, intelligence } = req.body;
    
    // Проверка распределения очков
    const baseStats = 30; // 10 на каждую характеристику
    const totalStats = strength + dexterity + intelligence;
    if (totalStats - baseStats > 5) {
      return res.status(400).json({ message: 'Invalid stat distribution' });
    }

    const character = new Character({
      user: req.user._id,
      name,
      class: characterClass,
      strength,
      dexterity,
      intelligence,
      availablePoints: 5 - (totalStats - baseStats)
    });
    await character.save();
    res.status(201).json(character);
  } catch (error) {
    res.status(400).json({ message: 'Error creating character', error: error.message });
  }
};

exports.getCharacter = async (req, res) => {
  try {
    const character = await Character.findOne({ user: req.user._id });
    if (!character) {
      return res.status(404).json({ message: 'Character not found' });
    }
    res.json(character);
  } catch (error) {
    res.status(400).json({ message: 'Error fetching character', error: error.message });
  }
};

exports.updateCharacter = async (req, res) => {
  try {
    const { strength, dexterity, intelligence, availablePoints } = req.body;
    
    // Проверка валидности обновления
    const character = await Character.findOne({ user: req.user._id });
    if (!character) {
      return res.status(404).json({ message: 'Character not found' });
    }

    const totalPointsUsed = (strength - character.strength) +
                            (dexterity - character.dexterity) +
                            (intelligence - character.intelligence);

    if (totalPointsUsed > character.availablePoints) {
      return res.status(400).json({ message: 'Invalid stat distribution' });
    }

    character.strength = strength;
    character.dexterity = dexterity;
    character.intelligence = intelligence;
    character.availablePoints = availablePoints;

    await character.save();
    res.json(character);
  } catch (error) {
    res.status(400).json({ message: 'Error updating character', error: error.message });
  }
};

exports.addItemToInventory = async (req, res) => {
  try {
	const { itemId } = req.body;
	const character = await Character.findOne({ user: req.user._id });
	if (!character) {
	  return res.status(404).json({ message: 'Character not found' });
	}
	
	const item = await Item.findById(itemId);
	if (!item) {
	  return res.status(404).json({ message: 'Item not found' });
	}

	const inventoryItem = character.inventory.find(i => i.item.toString() === itemId);
	if (inventoryItem) {
	  inventoryItem.quantity += 1;
	} else {
	  character.inventory.push({ item: itemId, quantity: 1 });
	}

	await character.save();
	res.json(character);
  } catch (error) {
	res.status(400).json({ message: 'Error adding item to inventory', error: error.message });
  }
};

exports.equipItem = async (req, res) => {
  try {
	const { itemId, slot } = req.body;
	const character = await Character.findOne({ user: req.user._id });
	if (!character) {
	  return res.status(404).json({ message: 'Character not found' });
	}

	const item = await Item.findById(itemId);
	if (!item) {
	  return res.status(404).json({ message: 'Item not found' });
	}

	if (item.slot !== slot) {
	  return res.status(400).json({ message: 'Item cannot be equipped in this slot' });
	}

	// Unequip current item if exists
	if (character.equipment[slot]) {
	  character.inventory.push({ item: character.equipment[slot], quantity: 1 });
	}

	// Remove item from inventory and equip it
	const inventoryIndex = character.inventory.findIndex(i => i.item.toString() === itemId);
	if (inventoryIndex === -1) {
	  return res.status(400).json({ message: 'Item not in inventory' });
	}

	if (character.inventory[inventoryIndex].quantity > 1) {
	  character.inventory[inventoryIndex].quantity -= 1;
	} else {
	  character.inventory.splice(inventoryIndex, 1);
	}

	character.equipment[slot] = itemId;

	await character.save();
	res.json(character);
  } catch (error) {
	res.status(400).json({ message: 'Error equipping item', error: error.message });
  }
};

// Далее код файла controllers\itemController.js:
const Item = require('../models/Item');

exports.createItem = async (req, res) => {
  try {
    const item = new Item(req.body);
    await item.save();
    res.status(201).json(item);
  } catch (error) {
    res.status(400).json({ message: 'Error creating item', error: error.message });
  }
};

exports.getAllItems = async (req, res) => {
  try {
    const items = await Item.find();
    res.json(items);
  } catch (error) {
    res.status(400).json({ message: 'Error fetching items', error: error.message });
  }
};

// Далее код файла middlewares\authMiddleware.js:
 const jwt = require('jsonwebtoken');
const User = require('../models/User');

const authMiddleware = async (req, res, next) => {
  try {
    // Check for token in headers
    const token = req.header('Authorization')?.replace('Bearer ', '');
    
    if (!token) {
      return res.status(401).json({ message: 'No token, authorization denied' });
    }

    // Verify token
    const decoded = jwt.verify(token, process.env.JWT_SECRET);

    // Find user by id
    const user = await User.findById(decoded.id).select('-password');
    
    if (!user) {
      return res.status(401).json({ message: 'Token is not valid' });
    }

    // Attach user to request object
    req.user = user;
    next();
  } catch (error) {
    res.status(401).json({ message: 'Token is not valid' });
  }
};

module.exports = authMiddleware;


// Далее код файла models\Character.js:
const mongoose = require('mongoose');

const characterSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  name: {
    type: String,
    required: true
  },
  class: {
    type: String,
    enum: ['Warrior', 'Mage', 'Archer'],
    required: true
  },
  level: {
    type: Number,
    default: 1
  },
  experience: {
    type: Number,
    default: 0
  },
  health: {
    type: Number,
    default: 100
  },
  strength: {
    type: Number,
    default: 10
  },
  dexterity: {
    type: Number,
    default: 10
  },
  intelligence: {
    type: Number,
    default: 10
  },
  availablePoints: {
    type: Number,
    default: 5
  },
  inventory: [{
    item: { type: mongoose.Schema.Types.ObjectId, ref: 'Item' },
    quantity: { type: Number, default: 1 }
  }],
  equipment: {
    hand: { type: mongoose.Schema.Types.ObjectId, ref: 'Item' },
    body: { type: mongoose.Schema.Types.ObjectId, ref: 'Item' },
    head: { type: mongoose.Schema.Types.ObjectId, ref: 'Item' },
    feet: { type: mongoose.Schema.Types.ObjectId, ref: 'Item' },
    accessory: { type: mongoose.Schema.Types.ObjectId, ref: 'Item' }
  }
}, { timestamps: true });

module.exports = mongoose.model('Character', characterSchema);


// Далее код файла models\Item.js:
const mongoose = require('mongoose');

const itemSchema = new mongoose.Schema({
  name: { type: String, required: true },
  type: { 
    type: String, 
    enum: ['weapon', 'armor', 'accessory'], 
    required: true 
  },
  slot: { 
    type: String, 
    enum: ['hand', 'body', 'head', 'feet', 'accessory'], 
    required: true 
  },
  stats: {
    strength: { type: Number, default: 0 },
    dexterity: { type: Number, default: 0 },
    intelligence: { type: Number, default: 0 },
    health: { type: Number, default: 0 }
  },
  description: { type: String }
});

module.exports = mongoose.model('Item', itemSchema);

// Далее код файла models\User.js:
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: { type: String, required: true, unique: true },
  email: { type: String, required: true, unique: true },
  password: { type: String, required: true }
}, { timestamps: true });

module.exports = mongoose.model('User', userSchema);

// Далее код файла routes\authRoutes.js:
const express = require('express');
const router = express.Router();
const { register, login } = require('../controllers/authController');
const authMiddleware = require('../middlewares/authMiddleware');

// Register route
router.post('/register', register);

// Login route
router.post('/login', login);

// Protected route
router.get('/me', authMiddleware, (req, res) => {
  res.json(req.user);
});

module.exports = router;

// Далее код файла routes\characterRoutes.js:
const express = require('express');
const { 
  createCharacter, 
  getCharacter, 
  updateCharacter, 
  addItemToInventory, 
  equipItem 
} = require('../controllers/characterController');
const authMiddleware = require('../middlewares/authMiddleware');

const router = express.Router();

router.post('/', authMiddleware, createCharacter);
router.get('/', authMiddleware, getCharacter);
router.put('/', authMiddleware, updateCharacter);
router.post('/inventory', authMiddleware, addItemToInventory);
router.post('/equip', authMiddleware, equipItem);

module.exports = router;

// Далее код файла routes\itemRoutes.js:
const express = require('express');
const { createItem, getAllItems } = require('../controllers/itemController');
const authMiddleware = require('../middlewares/authMiddleware');

const router = express.Router();

router.post('/', authMiddleware, createItem);
router.get('/', authMiddleware, getAllItems);

module.exports = router;

