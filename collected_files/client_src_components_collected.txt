// Собранный код для папки client_src_components
// Внимание! Здесь собраны только нужные в работе файлы. Некоторые файлы связанные с конфигурацией, авторизацией, некоторые компоненты могли не попасть в эту сборку, если не относятся к решению задачи!

// Код файла components\Admin\AdminGameItemForm.js:
import React, { useState, useEffect, useCallback } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { APP_SERVER_URL } from '../../config/config';

const InputField = ({ label, name, value, onChange, type = 'text' }) => (
  <div className="flex justify-between items-center mb-2">
    <label className="text-right pr-2 w-1/2">{label}:</label>
    {type === 'checkbox' ? (
      <input
        type="checkbox"
        name={name}
        checked={value}
        onChange={onChange}
        className="w-5 h-5"
      />
    ) : (
      <input
        type={type}
        name={name}
        value={value}
        onChange={onChange}
        className="w-1/2 h-[25px] px-2 border rounded text-right"
      />
    )}
  </div>
);

const SelectField = ({ label, name, value, onChange, options }) => (
  <div className="flex justify-between items-center mb-2">
    <label className="text-right pr-2 w-1/2">{label}:</label>
    <select
      name={name}
      value={value}
      onChange={onChange}
      className="w-1/2 h-[25px] px-2 border rounded text-right"
    >
      {options.map(option => (
        <option key={option} value={option}>{option}</option>
      ))}
    </select>
  </div>
);

const CheckboxField = ({ label, name, value, onChange, options }) => (
  <div className="flex flex-col mb-2">
    <label className="font-bold mb-1">{label}:</label>
    <div className="flex flex-wrap">
      {options.map(option => (
        <div key={option} className="mr-4">
          <input
            type="checkbox"
            id={`${name}-${option}`}
            name={name}
            value={option}
            checked={value.includes(option)}
            onChange={onChange}
            className="mr-1"
          />
          <label htmlFor={`${name}-${option}`}>{option}</label>
        </div>
      ))}
    </div>
  </div>
);

const AdminGameItemForm = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [gameItem, setGameItem] = useState({
    name: '',
    type: 'weapon',
    rarity: 'common',
    minLevel: 1,
    image: '',
    requiredClass: [],
    requiredStats: {
      strength: 0,
      dexterity: 0,
      intelligence: 0,
      endurance: 0,
      charisma: 0
    },
    description: '',
    stats: {
      strength: 0,
      dexterity: 0,
      intelligence: 0,
      endurance: 0,
      charisma: 0,
      damage: 0,
      armor: 0,
      criticalChance: 0,
      criticalDamage: 0,
      dodge: 0,
      healthRegenRate: 0,
      health: 0,
      counterAttack: 0
    },
    isStackable: false,
    maxQuantity: 1,
  });
  const [error, setError] = useState('');

  const fetchGameItem = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        console.log('Токен отсутствует. Перенаправление на страницу входа.');
        navigate('/login');
        return;
      }
      const response = await axios.get(`${APP_SERVER_URL}/api/gameItem/${id}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setGameItem(response.data);
    } catch (error) {
      console.error('Ошибка получения игрового предмета:', error.response?.data || error.message);
      setError('Ошибка загрузки данных игрового предмета. Пожалуйста, попробуйте еще раз.');

      if (error.response && error.response.status === 401) {
        console.log('Токен недействителен. Перенаправление на страницу входа.');
        localStorage.removeItem('token');
        navigate('/login');
      }
    }
  }, [id, navigate]);

  useEffect(() => {
    if (id) {
      fetchGameItem();
    }
  }, [id, fetchGameItem]);

  const handleChange = (e) => {
    const { name, value, type, checked } = e.target;
    setGameItem(prev => ({
      ...prev,
      [name]: type === 'checkbox' ? checked : value
    }));
  };

  const handleStatsChange = (e) => {
    const { name, value } = e.target;
    setGameItem(prev => ({
      ...prev,
      stats: { ...prev.stats, [name]: parseFloat(value) }
    }));
  };

  const handleRequiredStatsChange = (e) => {
    const { name, value } = e.target;
    setGameItem(prev => ({
      ...prev,
      requiredStats: { ...prev.requiredStats, [name]: parseFloat(value) }
    }));
  };

  const handleRequiredClassChange = (e) => {
    const { value, checked } = e.target;
    setGameItem(prev => ({
      ...prev,
      requiredClass: checked
        ? [...prev.requiredClass, value]
        : prev.requiredClass.filter(c => c !== value)
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        console.log('Токен отсутствует. Перенаправление на страницу входа.');
        navigate('/login');
        return;
      }
      if (id) {
        await axios.put(`${APP_SERVER_URL}/api/gameItem/${id}`, gameItem, {
          headers: { Authorization: `Bearer ${token}` }
        });
      } else {
        await axios.post(`${APP_SERVER_URL}/api/gameItem`, gameItem, {
          headers: { Authorization: `Bearer ${token}` }
        });
      }
      navigate('/admin/gameItem');
    } catch (error) {
      console.error('Ошибка сохранения игрового предмета:', error.response?.data || error.message);
      setError('Ошибка сохранения игрового предмета. Пожалуйста, проверьте данные и попробуйте еще раз.');

      if (error.response && error.response.status === 401) {
        console.log('Токен недействителен. Перенаправление на страницу входа.');
        localStorage.removeItem('token');
        navigate('/login');
      }
    }
  };

  return (
    <div className="container mx-auto px-4">
      <div className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <h2 className="text-2xl font-bold mb-4">{id ? 'Редактирование' : 'Создание'} игрового предмета</h2>
        {error && <div className="mb-4 text-red-500">{error}</div>}
        <form onSubmit={handleSubmit} className="grid grid-cols-3 gap-4">
          <div>
            <InputField label="Название" name="name" value={gameItem.name} onChange={handleChange} />
            <SelectField
              label="Тип"
              name="type"
              value={gameItem.type}
              onChange={handleChange}
              options={['weapon', 'armor', 'banner', 'helmet', 'shield', 'cloak', 'belt', 'boots', 'useful']}
            />
            <SelectField
              label="Редкость"
              name="rarity"
              value={gameItem.rarity}
              onChange={handleChange}
              options={['common', 'uncommon', 'rare', 'epic', 'legendary']}
            />
            <InputField label="Изображение" name="image" value={gameItem.image} onChange={handleChange} />
            <InputField
              label="Складируемый"
              name="isStackable"
              value={gameItem.isStackable}
              onChange={handleChange}
              type="checkbox"
            />
            {gameItem.isStackable && (
              <InputField
                label="Макс. количество"
                name="maxQuantity"
                value={gameItem.maxQuantity}
                onChange={handleChange}
                type="number"
              />
            )}
            <textarea
              name="description"
              value={gameItem.description}
              onChange={handleChange}
              placeholder="Описание предмета"
              className="w-full px-2 py-1 border rounded"
              rows="4"
            />
          </div>
          <div>
            <h3 className="font-bold mb-2">Требуемые характеристики:</h3>
            <InputField label="Мин. уровень" name="minLevel" value={gameItem.minLevel} onChange={handleChange} type="number" />
            <InputField label="Сила" name="strength" value={gameItem.requiredStats.strength} onChange={handleRequiredStatsChange} type="number" />
            <InputField label="Ловкость" name="dexterity" value={gameItem.requiredStats.dexterity} onChange={handleRequiredStatsChange} type="number" />
            <InputField label="Интеллект" name="intelligence" value={gameItem.requiredStats.intelligence} onChange={handleRequiredStatsChange} type="number" />
            <InputField label="Выносливость" name="endurance" value={gameItem.requiredStats.endurance} onChange={handleRequiredStatsChange} type="number" />
            <InputField label="Харизма" name="charisma" value={gameItem.requiredStats.charisma} onChange={handleRequiredStatsChange} type="number" />
            <CheckboxField
              label="Требуемый класс"
              name="requiredClass"
              value={gameItem.requiredClass}
              onChange={handleRequiredClassChange}
              options={['Warrior', 'Mage', 'Archer']}
            />
          </div>
          <div>
            <h3 className="font-bold mb-2">Бонусы предмета:</h3>
            <InputField label="Сила" name="strength" value={gameItem.stats.strength} onChange={handleStatsChange} type="number" />
            <InputField label="Ловкость" name="dexterity" value={gameItem.stats.dexterity} onChange={handleStatsChange} type="number" />
            <InputField label="Интеллект" name="intelligence" value={gameItem.stats.intelligence} onChange={handleStatsChange} type="number" />
            <InputField label="Выносливость" name="endurance" value={gameItem.stats.endurance} onChange={handleStatsChange} type="number" />
            <InputField label="Харизма" name="charisma" value={gameItem.stats.charisma} onChange={handleStatsChange} type="number" />
            <InputField label="Урон" name="damage" value={gameItem.stats.damage} onChange={handleStatsChange} type="number" />
            <InputField label="Броня" name="armor" value={gameItem.stats.armor} onChange={handleStatsChange} type="number" />
            <InputField label="Шанс крита" name="criticalChance" value={gameItem.stats.criticalChance} onChange={handleStatsChange} type="number" />
            <InputField label="Сила крита" name="criticalDamage" value={gameItem.stats.criticalDamage} onChange={handleStatsChange} type="number" />
            <InputField label="Уворот" name="dodge" value={gameItem.stats.dodge} onChange={handleStatsChange} type="number" />
            <InputField label="Контрудар" name="counterAttack" value={gameItem.stats.counterAttack} onChange={handleStatsChange} type="number" />
            <InputField label="HP" name="health" value={gameItem.stats.health} onChange={handleStatsChange} type="number" />
            <InputField label="Реген HP" name="healthRegenRate" value={gameItem.stats.healthRegenRate} onChange={handleStatsChange} type="number" />
          </div>
          <div className="col-span-3 mt-4">
            <button type="submit" className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
              {id ? 'Обновить предмет' : 'Создать предмет'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AdminGameItemForm;

// Код файла components\Admin\AdminGameItemList.js:
import React, { useState, useEffect, useCallback } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { APP_SERVER_URL } from '../../config/config';
import FilterSortPanel from '../Interface/FilterSortPanel';

const AdminGameItemList = () => {
  const navigate = useNavigate();
  const [gameItems, setGameItems] = useState([]);
  const [filteredGameItems, setFilteredGameItems] = useState([]);

  const fetchGameItems = useCallback(async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        console.log('Токен отсутствует. Перенаправление на страницу входа.');
        navigate('/login');
        return;
      }
      const response = await axios.get(`${APP_SERVER_URL}/api/gameItem/`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setGameItems(response.data);
      setFilteredGameItems(response.data);
    } catch (error) {
      console.error('Error fetching game items:', error.response?.data || error.message);
    }
  }, [navigate]);


  useEffect(() => {
    fetchGameItems();
  }, [fetchGameItems]);

  const handleDelete = async (gameItemId) => {
    if (window.confirm('Are you sure you want to delete this game item?')) {
      try {
        const token = localStorage.getItem('token');
        await axios.delete(`${APP_SERVER_URL}/api/gameItem/${gameItemId}`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        fetchGameItems();
      } catch (error) {
        console.error('Error deleting game item:', error);
      }
    }
  };

  const handleSendGameItem = async (gameItemId) => {
    const characterId = prompt("Enter the character ID to send the game item to:");
    const quantity = prompt("Enter the quantity to send:");
    if (characterId && quantity) {
      try {
        const token = localStorage.getItem('token');
        await axios.post(`${APP_SERVER_URL}/api/gameItem/send/${gameItemId}/${characterId}`,
          { quantity: parseInt(quantity, 10) },
          { headers: { Authorization: `Bearer ${token}` } }
        );
        alert('Game item sent successfully');
      } catch (error) {
        console.error('Error sending game item:', error.response?.data || error.message);
        alert(error.response?.data?.message || 'Error sending game item');
      }
    }
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-semibold text-gray-800">Game Items</h2>
        <Link to="/admin/gameItem/new" className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md transition-colors">
          Create New
        </Link>
      </div>
      <FilterSortPanel
        items={gameItems}
        onFilterSort={setFilteredGameItems}
        itemType="gameItem"
      />
      <div className="bg-white shadow-md rounded-lg overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rarity</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Min Level</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {filteredGameItems.map((gameItem) => (
              <tr key={gameItem._id}>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex items-center">
                    <div className="flex-shrink-0 h-10 w-10">
                      <img className="h-10 w-10" src={gameItem.image || "https://placehold.co/150"} alt={gameItem.name} />
                    </div>
                    <div className="ml-4">
                      <div className="text-sm font-medium text-gray-900">{gameItem.name}</div>
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{gameItem.type}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{gameItem.rarity}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{gameItem.minLevel}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <Link to={`/admin/gameItem/edit/${gameItem._id}`} className="text-indigo-600 hover:text-indigo-900 mr-3">Edit</Link>
                  <button onClick={() => handleDelete(gameItem._id)} className="text-red-600 hover:text-red-900 mr-3">Delete</button>
                  <button onClick={() => handleSendGameItem(gameItem._id)} className="text-green-600 hover:text-green-900">Send</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default AdminGameItemList;

// Код файла components\Admin\AdminPanel.js:
import React from 'react';
import { Link, Route, Routes } from 'react-router-dom';
import AdminGameItemList from './AdminGameItemList';
import AdminGameItemForm from './AdminGameItemForm';

const AdminPanel = () => {
  return (
    <div className="flex h-screen bg-gray-100">
      <aside className="w-64 bg-white shadow-md">
        <div className="p-4">
          <h1 className="text-xl font-semibold text-gray-800">Admin Panel</h1>
        </div>
        <nav className="mt-4">
          <Link to="/admin/gameItem" className="block py-2 px-4 text-gray-600 hover:bg-gray-200 transition-colors">
            Game Items
          </Link>
          {/* Add more menu items as needed */}
        </nav>
      </aside>
      <main className="flex-1 p-8">
        <Routes>
          <Route path="gameItem" element={<AdminGameItemList />} />
          <Route path="gameItem/new" element={<AdminGameItemForm />} />
          <Route path="gameItem/edit/:id" element={<AdminGameItemForm />} />
        </Routes>
      </main>
    </div>
  );
};

export default AdminPanel;

// Код файла components\Character\Character.js:
import React, { useState } from 'react';
import CharItemInfo from '../Inventory/CharItemInfo';
import CharacterStatus from './CharacterStatus';
import EquipmentSlot from './EquipmentSlot';
import HealthBar from './HealthBar';
import CharacterSilhouette from './CharacterSilhouette';

const Character = ({ character, onUnequipItem, onDeleteItem }) => {
  const [selectedItem, setSelectedItem] = useState(null);

  if (!character) {
    return <div>Загрузка персонажа...</div>;
  }

  const handleShowInfo = (charItem) => {
    setSelectedItem(charItem);
  };

  const getEquippedCharItem = (slot) => {
    return character.inventory && character.inventory.find(charItem => charItem.isEquipped && charItem.slot === slot);
  };

  const equipmentSlots = [
    { slot: 'banner', col: '1', row: '2' },
    { slot: 'helmet', col: '10', row: '2' },
    { slot: 'weapon', col: '1', row: '5' },
    { slot: 'shield', col: '10', row: '5' },
    { slot: 'armor', col: '1', row: '8' },
    { slot: 'cloak', col: '10', row: '8' },
    { slot: 'belt', col: '1', row: '11' },
    { slot: 'boots', col: '10', row: '11' },
  ];

  const usefulSlots = ['useful1', 'useful2', 'useful3'];

  const skillSlots = [
    { col: '1', row: '16', text: 'Skill 1' },
    { col: '3', row: '16', text: 'Skill 2' },
    { col: '5', row: '16', text: 'Skill 3' },
    { col: '7', row: '16', text: 'Skill 4' },
    { col: '9', row: '16', text: 'Skill 5' },
    { col: '11', row: '16', text: 'Skill 6' },
  ];

  return (
    <div className="w-full max-w-3xl mx-auto bg-gray-100 p-2 rounded-lg shadow-md">
      <div className="grid grid-cols-12 grid-rows-17 gap-1">
        <div className="col-span-12 text-center text-xl font-bold flex items-center justify-center">
          {character.nickname}
          <span className="ml-2 bg-blue-500 text-white rounded-md w-6 h-6 flex items-center justify-center text-sm">
            {character.level}
          </span>
          <span className="ml-2 bg-gray-300 text-gray-800 rounded-md px-2 py-1 text-xs">
            <CharacterStatus character={character} />
          </span>
        </div>

        <div className="col-span-6 col-start-4 row-start-2 bg-yellow-200 rounded-md overflow-hidden relative h-6">
          <div
            className="h-full bg-yellow-400 absolute left-0 top-0"
            style={{ width: `${(character.experience / 100) * 100}%` }}
          />
          <div className="absolute inset-0 flex items-center justify-center text-xs font-bold">
            EXP: {character.experience}/100
          </div>
        </div>

        <HealthBar currentHealth={character.healthData.currentHealth} maxHealth={character.healthData.maxHealth} />

        <CharacterSilhouette character={character} />

        {equipmentSlots.map(({ slot, col, row }) => (
          <div key={slot} className={`col-span-3 row-span-3 col-start-${col} row-start-${row} bg-white rounded-md flex items-center justify-center overflow-hidden`}>
            <EquipmentSlot
              slot={slot}
              item={getEquippedCharItem(slot)}
              onUnequip={onUnequipItem}
              onShowInfo={handleShowInfo}
            />
          </div>
        ))}

        {usefulSlots.map((slot, index) => (
          <div key={slot} className={`col-span-2 row-span-2 col-start-${4 + index * 2} row-start-15 bg-white rounded-md flex items-center justify-center overflow-hidden`}>
            <EquipmentSlot
              slot={slot}
              item={getEquippedCharItem(slot)}
              onUnequip={onUnequipItem}
              onShowInfo={handleShowInfo}
            />
          </div>
        ))}

        {skillSlots.map(({ col, row, text }, index) => (
          <div key={index} className={`col-span-2 row-span-2 col-start-${col} row-start-${row} bg-white rounded-md flex items-center justify-center overflow-hidden`}>
            <img src={`https://placehold.co/40x40?text=${text}`} alt={text} className="w-full h-full object-cover" />
          </div>
        ))}

        <div className="col-span-3 row-span-1 col-start-1 row-start-17 bg-yellow-300 rounded-md flex items-center justify-center overflow-hidden">
          <span className="font-bold text-yellow-800">Gold: {character.gold}</span>
        </div>
      </div>
      {selectedItem && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <CharItemInfo
            charItem={selectedItem}
            onClose={() => setSelectedItem(null)}
            character={character}
            onEquipItem={onUnequipItem}
            onDeleteItem={onDeleteItem}
          />
        </div>
      )}
    </div>
  );
};

export default Character;

// Код файла components\Character\CharacterStats.js:
import React from 'react';
import { FaDumbbell, FaRunning, FaBrain, FaHeart, FaSmile, FaFistRaised, FaShieldAlt, FaBullseye, FaWind, FaHeartbeat, FaStar, FaBolt, FaBalanceScale } from 'react-icons/fa';

const CharacterStats = ({ character, onCharacterUpdate, isUpdating, error }) => {
  const calculateTotalStat = (baseStat, statName) => {
    if (!character || !character.inventory) return baseStat;

    const equippedItems = character.inventory.filter(item => item.isEquipped);
    const bonusStat = equippedItems.reduce((sum, item) => sum + (item.gameItem?.stats?.[statName] || 0), 0);
    return baseStat + bonusStat;
  };

  const handleStatIncrease = async (stat) => {
    if (character.zeroPoints || isUpdating) return;

    const updatedCharacter = {
      ...character,
      [`base${stat.charAt(0).toUpperCase() + stat.slice(1)}`]: character[`base${stat.charAt(0).toUpperCase() + stat.slice(1)}`] + 1,
      availablePoints: character.availablePoints - 1,
      version: character.version
    };

    await onCharacterUpdate(updatedCharacter);
  };

  const StatParam = ({ icon: Icon, label, value, maxValue, stat, isAdjustable = true }) => {
    if (!stat && value === undefined) return null;

    const baseValue = character[`base${stat?.charAt(0).toUpperCase() + stat?.slice(1)}`] || 0;
    const totalValue = stat ? calculateTotalStat(baseValue, stat.toLowerCase()) : value;
    const bonusValue = stat ? totalValue - baseValue : 0;

    const formatValue = (val) => {
      if (typeof val === 'number') {
        if (['strength', 'dexterity', 'intelligence', 'endurance', 'charisma'].includes(stat)) {
          return Math.round(val);
        }
        return val.toFixed(2);
      }
      return val;
    };

    return (
      <div className="flex justify-between items-center p-2 bg-white rounded-lg shadow-sm mb-2">
        <span className="flex items-center text-gray-700">
          <Icon className="mr-2 text-blue-500" />
          {label}:
        </span>
        <div className="flex items-center">
          <span className="font-semibold text-blue-600 mx-2">
            {maxValue !== undefined ? `${formatValue(totalValue)}/${formatValue(maxValue)}` : formatValue(totalValue)}
            {bonusValue > 0 && <span className="text-green-500 ml-1">(+{formatValue(bonusValue)})</span>}
          </span>
          {isAdjustable && !character.zeroPoints && character.availablePoints > 0 && (
            <button
              onClick={() => handleStatIncrease(stat)}
              className={`w-6 h-6 ${isUpdating ? 'bg-gray-400 cursor-not-allowed' : 'bg-green-500 hover:bg-green-600'} text-white rounded transition-colors duration-200`}
              disabled={isUpdating}
            >
              +
            </button>
          )}
        </div>
      </div>
    );
  };

  if (!character || !character.calculatedStats) {
    return <div>Загрузка характеристик...</div>;
  }

  const { calculatedStats } = character;

  return (
    <div className="relative grid grid-cols-1 md:grid-cols-2 gap-4">
      {error && <div className="col-span-2 text-red-500 mb-4">{error}</div>}
      <div>
        <h3 className="text-lg font-bold mb-3 text-gray-800">Базовые параметры</h3>
        <StatParam icon={FaDumbbell} label="Сила" value={calculateTotalStat(character.baseStrength, 'strength')} stat="strength" />
        <StatParam icon={FaRunning} label="Ловкость" value={calculateTotalStat(character.baseDexterity, 'dexterity')} stat="dexterity" />
        <StatParam icon={FaBrain} label="Интеллект" value={calculateTotalStat(character.baseIntelligence, 'intelligence')} stat="intelligence" />
        <StatParam icon={FaHeart} label="Выносливость" value={calculateTotalStat(character.baseEndurance, 'endurance')} stat="endurance" />
        <StatParam icon={FaSmile} label="Харизма" value={calculateTotalStat(character.baseCharisma, 'charisma')} stat="charisma" />
        {character.availablePoints > 0 && !character.zeroPoints && (
          <div className="bg-yellow-300 flex items-center p-2 bg-white rounded-lg shadow-sm mb-2 font-semibold text-red-600 animate-pulse">
            <FaStar className="mr-2 text-yellow-500" />
            Доступные навыки: {character.availablePoints}
          </div>
        )}
      </div>
      <div>
        <h3 className="text-lg font-bold mb-3 text-gray-800">Боевые характеристики</h3>
        <StatParam icon={FaFistRaised} label="Урон" value={calculatedStats.damage} isAdjustable={false} />
        <StatParam icon={FaShieldAlt} label="Броня" value={calculatedStats.armor} isAdjustable={false} />
        <StatParam icon={FaBullseye} label="Шанс крита" value={`${calculatedStats.criticalChance.toFixed(2)}%`} isAdjustable={false} />
        <StatParam icon={FaBolt} label="Сила крита" value={`${calculatedStats.criticalDamage.toFixed(2)}%`} isAdjustable={false} />
        <StatParam icon={FaWind} label="Уворот" value={`${calculatedStats.dodge.toFixed(2)}%`} isAdjustable={false} />
        <StatParam icon={FaBalanceScale} label="Контрудар" value={`${calculatedStats.counterAttack.toFixed(2)}%`} isAdjustable={false} />
        <StatParam icon={FaHeartbeat} label="Реген здоровья" value={`${calculatedStats.healthRegenRate.toFixed(2)}/сек`} isAdjustable={false} />
      </div>
    </div>
  );
};

export default CharacterStats;

// Код файла components\Character\EquipmentSlot.js:
import React, { useState, useCallback, useEffect } from 'react';
import { getEquippedCharItemStyle } from '../../utils/charItemUtils';

const EquipmentSlot = ({ slot, item, onUnequip, onShowInfo }) => {
  const [pressTimer, setPressTimer] = useState(null);

  const handleMouseDown = useCallback(() => {
    setPressTimer(setTimeout(() => {
      if (item) {
        onShowInfo(item);
      }
    }, 1000));
  }, [item, onShowInfo]);

  const handleMouseUp = () => {
    clearTimeout(pressTimer);
  };

  const handleClick = () => {
    if (item) {
      onUnequip(item._id);
    }
  };

  useEffect(() => {
    return () => {
      if (pressTimer) clearTimeout(pressTimer);
    };
  }, [pressTimer]);

  return (
    <div
      className="w-full h-full flex items-center justify-center cursor-pointer"
      style={item ? getEquippedCharItemStyle(item.gameItem.rarity) : {}}
      onClick={handleClick}
      onMouseDown={handleMouseDown}
      onMouseUp={handleMouseUp}
      onMouseLeave={handleMouseUp}
      onTouchStart={handleMouseDown}
      onTouchEnd={handleMouseUp}
    >
      {item ? (
        <div className="w-full h-full relative">
          <img
            src={item.gameItem.image || `https://placehold.co/60x60?text=${slot}`}
            alt={item.gameItem.name}
            className="w-full h-full object-cover"
          />
          <div className="absolute inset-0 bg-black bg-opacity-30 flex items-center justify-center">
            <div className="text-white text-xs font-bold bg-gray-800 bg-opacity-75 px-1 py-0.5 rounded">
              {item.gameItem.name}
            </div>
          </div>
        </div>
      ) : (
        <img
          src={`https://placehold.co/60x60?text=${slot}`}
          alt={slot}
          className="w-full h-full object-cover"
        />
      )}
    </div>
  );
};

export default EquipmentSlot;

// Код файла components\Character\HealthBar.js:
import React from 'react';

const HealthBar = ({ currentHealth, maxHealth }) => {
  const healthPercentage = (currentHealth / maxHealth) * 100;

  return (
    <div className="col-span-6 col-start-4 row-start-3 bg-red-200 rounded-md overflow-hidden relative h-6">
      <div
        className="h-full bg-red-500 absolute left-0 top-0"
        style={{ width: `${healthPercentage}%` }}
      />
      <div className="absolute inset-0 flex items-center justify-center text-xs font-bold text-white">
        HP: {Math.round(currentHealth)}/{maxHealth}
      </div>
    </div>
  );
};

export default HealthBar;

// Код файла components\Combat\BattleArena.js:
 


// Код файла components\Combat\SkillSelection.js:
 


// Код файла components\Dashboard\Dashboard.js:
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Character from '../Character/Character';
import CharacterStats from '../Character/CharacterStats';
import CreateCharacter from '../Character/CharacterCreate';
import Inventory from '../Inventory/Inventory';
import Skills from '../Skills/Skills';
import useAuth from '../../hooks/useAuth';
import useCharacter from '../../hooks/useCharacter';
import Header from '../Interface/Header';

const Tab = ({ label, active, onClick }) => (
  <button
    className={`px-4 py-2 font-bold transition-colors duration-200 
      ${active ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}
      first:rounded-tl-lg last:rounded-tr-lg`}
    onClick={onClick}
  >
    {label}
  </button>
);

const TabContent = ({ children }) => (
  <div className="w-full max-w-3xl mx-auto bg-gray-100 p-2 rounded-lg shadow-md">
    {children}
  </div>
);

const Dashboard = () => {
  const [activeTab, setActiveTab] = useState('characterstats');
  const [equipError, setEquipError] = useState('');
  const navigate = useNavigate();
  const { user, loading: authLoading } = useAuth();
  const {
    character,
    loading: characterLoading,
    error,
    isUpdating,
    updateCharacter,
    equipItem,
    fetchCharacter,
    removeItem
  } = useCharacter();

  if (authLoading || characterLoading) {
    return <div className="text-center p-4">Загрузка...</div>;
  }

  if (!user) {
    navigate('/login');
    return null;
  }

  const handleCharacterUpdate = async (updatedCharacter) => {
    await updateCharacter(updatedCharacter);
  };

  const canEquipItem = (charItem) => {
    if (!charItem || !charItem.gameItem) return false;
    if (character.level < charItem.gameItem.minLevel) return false;
    if (charItem.gameItem.requiredClass.length && !charItem.gameItem.requiredClass.includes(character.class)) return false;
    for (const [stat, value] of Object.entries(charItem.gameItem.requiredStats)) {
      if (character[`base${stat.charAt(0).toUpperCase() + stat.slice(1)}`] < value) return false;
    }
    return true;
  };

  const handleEquipItem = async (charItemId) => {
    const charItem = character.inventory.find(i => i._id === charItemId);
    if (charItem.isEquipped || canEquipItem(charItem)) {
      const result = await equipItem(charItemId);
      setEquipError(result.success ? '' : result.message);
    } else {
      setEquipError('Не выполнены минимальные требования для надевания этого предмета.');
    }
  };

  const handleUnequipItem = async (charItemId) => {
    await equipItem(charItemId);
  };

  const handleDeleteItem = async (charItemId) => {
    try {
      await removeItem(charItemId);
      setEquipError('');
    } catch (error) {
      console.error('Ошибка удаления предмета:', error);
      setEquipError('Ошибка удаления предмета. Пожалуйста, попробуйте еще раз.');
    }
  };

  const handleCharacterCreated = () => {
    fetchCharacter();
  };

  const renderContent = () => {
    if (!character) {
      return (
        <div className="bg-white p-4 rounded-lg shadow-lg">
          <h2 className="text-2xl font-bold mb-4">Создание персонажа</h2>
          <CreateCharacter onCharacterCreated={handleCharacterCreated} />
        </div>
      );
    }

    return (
      <>
        <Character
          character={character}
          onUnequipItem={handleUnequipItem}
          onDeleteItem={handleDeleteItem}
        />
        <div className="w-full max-w-3xl mx-auto bg-gray-100 p-2 rounded-lg shadow-md">
          <Tab label="Характеристики" active={activeTab === 'characterstats'} onClick={() => setActiveTab('characterstats')} />
          <Tab label="Инвентарь" active={activeTab === 'inventory'} onClick={() => setActiveTab('inventory')} />
          <Tab label="Навыки" active={activeTab === 'skills'} onClick={() => setActiveTab('skills')} />
        </div>
        <TabContent>
          {activeTab === 'characterstats' && (
            <CharacterStats
              character={character}
              onCharacterUpdate={handleCharacterUpdate}
              isUpdating={isUpdating}
              error={error}
            />
          )}
          {activeTab === 'inventory' && (
            <Inventory
              inventory={character.inventory || []}
              onClickInventoryItem={handleEquipItem}
              equipError={equipError}
              canEquipItem={canEquipItem}
              character={character}
            />
          )}
          {activeTab === 'skills' && <Skills skills={character.skills || []} />}
        </TabContent>
      </>
    );
  };

  return (
    <div className="max-w-4xl mx-auto bg-white p-4 rounded-lg shadow-lg">
      <Header />

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
          <strong className="font-bold">Ошибка!</strong>
          <span className="block sm:inline"> {error}</span>
        </div>
      )}

      {renderContent()}
    </div>
  );
};

export default Dashboard;

// Код файла components\Interface\FilterSortPanel.js:
import React, { useState, useEffect, useMemo, useCallback } from 'react';

const FilterSortPanel = ({ items, onFilterSort, itemType }) => {
  const [filterCategory, setFilterCategory] = useState('none');
  const [filterValue, setFilterValue] = useState('all');
  const [sortBy, setSortBy] = useState('none');
  const [sortOrder, setSortOrder] = useState('asc');

  const filterCategories = useMemo(() => [
    { value: 'none', label: 'Без фильтра' },
    { value: 'type', label: 'По типу' },
    { value: 'rarity', label: 'По редкости' },
    { value: 'class', label: 'По классу' },
  ], []);

  const filterOptions = useMemo(() => ({
    type: [
      { value: 'all', label: 'Все типы' },
      { value: 'weapon', label: 'Оружие' },
      { value: 'armor', label: 'Броня' },
      { value: 'helmet', label: 'Шлемы' },
      { value: 'shield', label: 'Щиты' },
      { value: 'cloak', label: 'Плащи' },
      { value: 'belt', label: 'Пояса' },
      { value: 'boots', label: 'Обувь' },
      { value: 'banner', label: 'Знамена' },
      { value: 'useful', label: 'Полезное' },
    ],
    rarity: [
      { value: 'all', label: 'Все редкости' },
      { value: 'common', label: 'Обычные' },
      { value: 'uncommon', label: 'Необычные' },
      { value: 'rare', label: 'Редкие' },
      { value: 'epic', label: 'Эпические' },
      { value: 'legendary', label: 'Легендарные' },
    ],
    class: [
      { value: 'all', label: 'Все классы' },
      { value: 'Warrior', label: 'Воин' },
      { value: 'Mage', label: 'Маг' },
      { value: 'Archer', label: 'Лучник' },
    ],
  }), []);

  const sortOptions = useMemo(() => {
    const options = [
      { value: 'none', label: 'Без сортировки' },
      { value: 'rarity', label: 'По редкости' },
    ];

    if (itemType === 'inventory') {
      options.push({ value: 'level', label: 'По уровню' });
    } else if (itemType === 'gameItem') {
      options.push(
        { value: 'name', label: 'По имени' },
        { value: 'type', label: 'По типу' },
        { value: 'minLevel', label: 'По мин. уровню' }
      );
    }

    return options;
  }, [itemType]);

  const filterAndSortItems = useCallback(() => {
    let result = [...items];

    // Применяем фильтр
    if (filterCategory !== 'none' && filterValue !== 'all') {
      result = result.filter(item => {
        const gameItem = itemType === 'inventory' ? item.gameItem : item;
        switch (filterCategory) {
          case 'type':
            return gameItem.type === filterValue;
          case 'rarity':
            return gameItem.rarity === filterValue;
          case 'class':
            return gameItem.requiredClass.includes(filterValue);
          default:
            return true;
        }
      });
    }

    // Применяем сортировку
    if (sortBy !== 'none') {
      const rarityOrder = ['common', 'uncommon', 'rare', 'epic', 'legendary'];
      result.sort((a, b) => {
        const gameItemA = itemType === 'inventory' ? a.gameItem : a;
        const gameItemB = itemType === 'inventory' ? b.gameItem : b;
        let comparison = 0;
        switch (sortBy) {
          case 'name':
            comparison = gameItemA.name.localeCompare(gameItemB.name);
            break;
          case 'type':
            comparison = gameItemA.type.localeCompare(gameItemB.type);
            break;
          case 'rarity':
            comparison = rarityOrder.indexOf(gameItemA.rarity) - rarityOrder.indexOf(gameItemB.rarity);
            break;
          case 'level':
          case 'minLevel':
            comparison = gameItemA.minLevel - gameItemB.minLevel;
            break;
          default:
            comparison = 0;
        }
        return sortOrder === 'asc' ? comparison : -comparison;
      });
    }

    onFilterSort(result);
  }, [items, filterCategory, filterValue, sortBy, sortOrder, itemType, onFilterSort]);

  useEffect(() => {
    filterAndSortItems();
  }, [filterAndSortItems]);

  const renderDropdown = (label, value, onChange, options) => (
    <div className="mb-2 mr-2">
      <label className="mr-2">{label}:</label>
      <select
        value={value}
        onChange={(e) => onChange(e.target.value)}
        className="p-1 rounded border border-gray-300"
      >
        {options.map(option => (
          <option key={option.value} value={option.value}>{option.label}</option>
        ))}
      </select>
    </div>
  );

  return (
    <div className="mb-4 flex flex-wrap items-center">
      {renderDropdown('Фильтр', filterCategory, setFilterCategory, filterCategories)}
      {filterCategory !== 'none' && renderDropdown('Значение', filterValue, setFilterValue, filterOptions[filterCategory] || [])}
      {renderDropdown('Сортировка', sortBy, setSortBy, sortOptions)}
      {sortBy !== 'none' && (
        <button
          onClick={() => setSortOrder(prev => prev === 'asc' ? 'desc' : 'asc')}
          className="ml-2 px-2 py-1 bg-blue-500 text-white rounded hover:bg-blue-600"
        >
          {sortOrder === 'asc' ? '↑' : '↓'}
        </button>
      )}
    </div>
  );
};

export default FilterSortPanel;

// Код файла components\Interface\Header.js:
import React from 'react';
import { useNavigate } from 'react-router-dom';
import useAuth from '../../hooks/useAuth';

const Header = () => {
  const navigate = useNavigate();
  const { user, logout } = useAuth();

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  return (
    <div className="flex justify-between items-center mb-4">
      <h1 className="text-2xl font-bold">
        {user ? `Добро пожаловать, ${user.username}!` : 'Добро пожаловать!'}
      </h1>
      {user && (
        <button
          onClick={handleLogout}
          className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded transition-colors duration-200"
        >
          Выйти
        </button>
      )}
    </div>
  );
};

export default Header;

// Код файла components\Inventory\CharItemInfo.js:
import React, { useState, useEffect } from 'react';
import { getCharItemStyle, getEquippedCharItemStyle } from '../../utils/charItemUtils';
import { charItem } from '../../services/api';

const CharItemInfo = ({ charItem: initialCharItem, onClose, character, onEquipItem, onDeleteItem }) => {
  const [isEquipped, setIsEquipped] = useState(initialCharItem.isEquipped);
  const [deleteQuantity, setDeleteQuantity] = useState(1);
  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);

  useEffect(() => {
    setIsEquipped(initialCharItem.isEquipped);
  }, [initialCharItem.isEquipped]);

  if (!initialCharItem || !initialCharItem.gameItem) return null;

  const { gameItem } = initialCharItem;
  const itemStyle = isEquipped ? getEquippedCharItemStyle(gameItem.rarity) : getCharItemStyle(gameItem.rarity);

  const isStatInsufficient = (stat, requiredValue) => {
    const characterStat = character[`base${stat.charAt(0).toUpperCase() + stat.slice(1)}`];
    return characterStat < requiredValue;
  };

  const rarityColors = {
    common: 'bg-gray-500',
    uncommon: 'bg-green-600',
    rare: 'bg-blue-600',
    epic: 'bg-purple-600',
    legendary: 'bg-orange-500'
  };

  const canEquipItem = () => {
    if (character.level < gameItem.minLevel) return false;
    if (gameItem.requiredClass.length && !gameItem.requiredClass.includes(character.class)) return false;
    for (const [stat, value] of Object.entries(gameItem.requiredStats)) {
      if (character[`base${stat.charAt(0).toUpperCase() + stat.slice(1)}`] < value) return false;
    }
    return true;
  };

  const handleEquipToggle = async () => {
    await onEquipItem(initialCharItem._id);
    setIsEquipped(!isEquipped);
  };

  const handleDeleteConfirm = async () => {
    if (isEquipped) {
      alert('Нельзя удалить экипированный предмет');
      return;
    }
    
    try {
      if (gameItem.isStackable && deleteQuantity < initialCharItem.quantity) {
        await charItem.update(initialCharItem._id, { quantity: initialCharItem.quantity - deleteQuantity });
        if (typeof onDeleteItem === 'function') {
          onDeleteItem(initialCharItem._id, deleteQuantity);
        }
      } else {
        await charItem.delete(initialCharItem._id);
        if (typeof onDeleteItem === 'function') {
          onDeleteItem(initialCharItem._id, initialCharItem.quantity);
        }
      }
      onClose();
    } catch (error) {
      console.error('Ошибка удаления предмета:', error);
      alert('Не удалось удалить предмет');
    }
  };

return (
    <div className="bg-white rounded-lg shadow-xl overflow-hidden max-w-md w-full">
      <div className={`relative p-6 ${rarityColors[gameItem.rarity]} text-white`}>
        <h2 className="text-2xl font-bold mb-2">{gameItem.name}</h2>
        <p className="text-white opacity-90">{gameItem.type} - {gameItem.rarity.charAt(0).toUpperCase() + gameItem.rarity.slice(1)}</p>
        <button onClick={onClose} className="absolute top-4 right-4 text-white hover:text-gray-200">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div className="p-6 bg-gray-50">
        <div className="flex mb-4">
          <div className="w-24 h-24 mr-4 rounded-lg shadow overflow-hidden" style={itemStyle}>
            <img src={gameItem.image || "https://placehold.co/100x100?text=No+Image"} alt={gameItem.name} className="w-full h-full object-cover" />
          </div>
          <div>
            <p className="mb-1">
              <span className="font-semibold">Мин. уровень:</span> 
              <span className={character.level < gameItem.minLevel ? "text-red-500 font-bold" : ""}> {gameItem.minLevel}</span>
            </p>
            <p className="mb-1">
              <span className="font-semibold">Класс:</span> 
              <span className={!gameItem.requiredClass.includes(character.class) ? "text-red-500 font-bold" : ""}> {gameItem.requiredClass.join(', ')}</span>
            </p>
            {gameItem.isStackable && (
              <p className="mb-1">
                <span className="font-semibold">Количество:</span> {initialCharItem.quantity}
              </p>
            )}
          </div>
        </div>
        {Object.keys(gameItem.requiredStats).some(stat => gameItem.requiredStats[stat] > 0) && (
          <div className="mb-4 p-3 bg-white rounded shadow">
            <h3 className="font-bold mb-2">Требуемые характеристики:</h3>
            <div className="grid grid-cols-2 gap-2">
              {Object.entries(gameItem.requiredStats).map(([stat, value]) => (
                value > 0 && (
                  <p key={stat} className={isStatInsufficient(stat, value) ? "text-red-500 font-bold" : ""}>
                    <strong>{stat}:</strong> {value}
                  </p>
                )
              ))}
            </div>
          </div>
        )}
        <div className="mb-4 p-3 bg-white rounded shadow">
          <h3 className="font-bold mb-2">Бонусы:</h3>
          <div className="grid grid-cols-2 gap-2">
            {Object.entries(gameItem.stats).map(([stat, value]) => (
              value !== 0 && <p key={stat}><strong>{stat}:</strong> {value > 0 ? '+' : ''}{value}</p>
            ))}
          </div>
        </div>
        {gameItem.description && (
          <p className="text-sm italic text-gray-600 mt-4">{gameItem.description}</p>
        )}
        {isEquipped ? (
          <p className="mt-4 text-green-600 font-bold">Экипировано</p>
        ) : null}
        <div className="mt-4 flex justify-between">
          <button
            onClick={handleEquipToggle}
            className={`px-4 py-2 rounded ${
              canEquipItem() || isEquipped
                ? 'bg-blue-500 hover:bg-blue-600 text-white'
                : 'bg-gray-300 text-gray-500 cursor-not-allowed'
            }`}
            disabled={!canEquipItem() && !isEquipped}
          >
            {isEquipped ? 'Снять' : 'Надеть'}
          </button>
          {!isEquipped && (
            <button
              onClick={() => setShowDeleteConfirm(true)}
              className="px-4 py-2 rounded bg-red-500 hover:bg-red-600 text-white"
            >
              Удалить
            </button>
          )}
        </div>
        {showDeleteConfirm && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white p-6 rounded-lg">
              <h3 className="text-lg font-bold mb-4">Подтвердите удаление</h3>
              {gameItem.isStackable && (
                <div className="mb-4">
                  <label className="block mb-2">Количество для удаления:</label>
                  <input
                    type="number"
                    min="1"
                    max={initialCharItem.quantity}
                    value={deleteQuantity}
                    onChange={(e) => setDeleteQuantity(Math.max(1, Math.min(initialCharItem.quantity, parseInt(e.target.value) || 1)))}
                    className="w-full p-2 border rounded"
                  />
                </div>
              )}
              <div className="flex justify-end">
                <button
                  onClick={() => setShowDeleteConfirm(false)}
                  className="px-4 py-2 rounded bg-gray-300 hover:bg-gray-400 text-gray-800 mr-2"
                >
                  Отмена
                </button>
                <button
                  onClick={handleDeleteConfirm}
                  className="px-4 py-2 rounded bg-red-500 hover:bg-red-600 text-white"
                >
                  Удалить
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default CharItemInfo;

// Код файла components\Inventory\Inventory.js:
import React, { useState } from 'react';
import CharItemInfo from './CharItemInfo';
import { getCharItemStyle, getEquippedCharItemStyle } from '../../utils/charItemUtils';
import FilterSortPanel from '../Interface/FilterSortPanel';

const InventorySlot = ({ inventoryItem, onClickInventoryItem, onShowInfo, canEquipItem }) => {
  const [pressTimer, setPressTimer] = useState(null);

  const handleMouseDown = () => {
    setPressTimer(setTimeout(() => {
      if (inventoryItem) {
        onShowInfo(inventoryItem);
      }
    }, 1000));
  };

  const handleMouseUp = () => {
    clearTimeout(pressTimer);
  };

  const handleClick = () => {
    if (inventoryItem) {
      if (canEquipItem(inventoryItem)) {
        onClickInventoryItem(inventoryItem._id);
      } else {
        onShowInfo(inventoryItem);
      }
    }
  };

  if (!inventoryItem) return null;

  const itemStyle = inventoryItem.isEquipped
    ? getEquippedCharItemStyle(inventoryItem.gameItem.rarity)
    : getCharItemStyle(inventoryItem.gameItem.rarity);

  return (
    <div
      className={`aspect-square rounded-md flex flex-col justify-end items-center p-1 text-xs text-center cursor-pointer transition-colors duration-200 hover:bg-opacity-80 overflow-hidden relative bg-cover bg-center`}
      style={{
        ...itemStyle,
        backgroundImage: `url(${inventoryItem.gameItem.image || "https://placehold.co/100"})`
      }}
      onClick={handleClick}
      onMouseDown={handleMouseDown}
      onMouseUp={handleMouseUp}
      onMouseLeave={handleMouseUp}
      onTouchStart={handleMouseDown}
      onTouchEnd={handleMouseUp}
    >
      <div className="absolute inset-0 bg-black bg-opacity-30"></div>
      <div className="relative z-10 bg-gray-800 bg-opacity-75 text-white px-1 py-0.5 rounded">
        <div className="font-bold truncate w-full">{inventoryItem.gameItem.name}</div>
        {inventoryItem.gameItem.isStackable && (
          <div>
            {inventoryItem.displayQuantity}/{inventoryItem.gameItem.maxQuantity}
          </div>
        )}
        {inventoryItem.stacksCount > 1 && (
          <div className="text-xs text-gray-300">x{inventoryItem.stacksCount}</div>
        )}
      </div>
    </div>
  );
};

const Inventory = ({ inventory, onClickInventoryItem, equipError, canEquipItem, character }) => {
  const [filteredInventory, setFilteredInventory] = useState(inventory);
  const [selectedItem, setSelectedItem] = useState(null);

  const handleShowInfo = (item) => {
    setSelectedItem(item);
  };

  const handleDeleteItem = (deletedItemId, deletedQuantity) => {
    setFilteredInventory(prevInventory => {
      const updatedInventory = prevInventory.map(item => {
        if (item._id === deletedItemId) {
          const newQuantity = item.quantity - deletedQuantity;
          if (newQuantity <= 0) {
            return null;
          }
          return { ...item, quantity: newQuantity };
        }
        return item;
      }).filter(Boolean);
      return updatedInventory;
    });
  };

  return (
    <div>
      <FilterSortPanel
        items={inventory}
        onFilterSort={setFilteredInventory}
        itemType="inventory"
      />
      {equipError && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
          <span className="block sm:inline">{equipError}</span>
        </div>
      )}
      <div className="grid grid-cols-4 sm:grid-cols-6 md:grid-cols-6 lg:grid-cols-6 gap-1 bg-gray-200 p-2 rounded-lg">
        {filteredInventory.flatMap((item) => {
          const fullStacks = Math.floor(item.quantity / item.gameItem.maxQuantity);
          const remainingItems = item.quantity % item.gameItem.maxQuantity;

          return [
            ...Array(fullStacks).fill().map((_, index) => (
              <InventorySlot
                key={`${item._id}-${index}`}
                inventoryItem={{
                  ...item,
                  displayQuantity: item.gameItem.maxQuantity,
                  isFullStack: true
                }}
                onClickInventoryItem={onClickInventoryItem}
                onShowInfo={() => handleShowInfo(item)}
                canEquipItem={canEquipItem}
              />
            )),
            remainingItems > 0 && (
              <InventorySlot
                key={`${item._id}-${fullStacks}`}
                inventoryItem={{
                  ...item,
                  displayQuantity: remainingItems,
                  isFullStack: false
                }}
                onClickInventoryItem={onClickInventoryItem}
                onShowInfo={() => handleShowInfo(item)}
                canEquipItem={canEquipItem}
              />
            )
          ].filter(Boolean);
        })}
        {Array.from({ length: Math.max(0, 24 - filteredInventory.reduce((acc, item) => acc + Math.ceil(item.quantity / item.gameItem.maxQuantity), 0)) }).map((_, index) => (
          <div
            key={`empty-${index}`}
            className="aspect-square bg-white border border-gray-300 rounded-md flex flex-col justify-center items-center p-1 text-xs text-center"
          />
        ))}
      </div>
      {selectedItem && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <CharItemInfo
            charItem={selectedItem}
            onClose={() => setSelectedItem(null)}
            character={character}
            onEquipItem={onClickInventoryItem}
            onDeleteItem={handleDeleteItem}
          />
        </div>
      )}
    </div>
  );
};

export default Inventory;

// Код файла components\Inventory\InventorySlot.js:
import React, { useState, useCallback, useEffect } from 'react';
import { getCharItemStyle, getEquippedCharItemStyle } from '../../utils/charItemUtils';


const InventorySlot = ({ inventoryItem, onClickInventoryItem, onShowInfo, canEquipItem }) => {
    const [pressTimer, setPressTimer] = useState(null);

    const handleMouseDown = useCallback(() => {
        setPressTimer(setTimeout(() => {
            if (inventoryItem) {
                onShowInfo(inventoryItem);
            }
        }, 1000));
    }, [inventoryItem, onShowInfo]);

    const handleMouseUp = () => {
        clearTimeout(pressTimer);
    };

    const handleClick = () => {
        if (inventoryItem) {
            if (canEquipItem(inventoryItem)) {
                onClickInventoryItem(inventoryItem._id);
            } else {
                onShowInfo(inventoryItem);
            }
        }
    };

    useEffect(() => {
        return () => {
            if (pressTimer) clearTimeout(pressTimer);
        };
    }, [pressTimer]);

    if (!inventoryItem) return null;

    const itemStyle = inventoryItem.isEquipped
        ? getEquippedCharItemStyle(inventoryItem.gameItem.rarity)
        : getCharItemStyle(inventoryItem.gameItem.rarity);

    return (
        <div
            className={`aspect-square rounded-md flex flex-col justify-end items-center p-1 text-xs text-center cursor-pointer transition-colors duration-200 hover:bg-opacity-80 overflow-hidden relative bg-cover bg-center`}
            style={{
                ...itemStyle,
                backgroundImage: `url(${inventoryItem.gameItem.image || "https://placehold.co/100"})`
            }}
            onClick={handleClick}
            onMouseDown={handleMouseDown}
            onMouseUp={handleMouseUp}
            onMouseLeave={handleMouseUp}
            onTouchStart={handleMouseDown}
            onTouchEnd={handleMouseUp}
        >
            <div className="absolute inset-0 bg-black bg-opacity-30"></div>
            <div className="relative z-10 bg-gray-800 bg-opacity-75 text-white px-1 py-0.5 rounded">
                <div className="font-bold truncate w-full">{inventoryItem.gameItem.name}</div>
                {inventoryItem.gameItem.isStackable && (
                    <div>
                        {inventoryItem.displayQuantity}/{inventoryItem.gameItem.maxQuantity}
                    </div>
                )}
                {inventoryItem.stacksCount > 1 && (
                    <div className="text-xs text-gray-300">x{inventoryItem.stacksCount}</div>
                )}
            </div>
        </div>
    );
};

export default InventorySlot;

// Код файла components\Skills\Skills.js:
import React, { useState } from 'react';

const CategoryTab = ({ id, name, active, onClick }) => (
  <button
    className={`px-4 py-2 font-bold transition-colors duration-200 
      ${active ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}
      first:rounded-tl-lg last:rounded-tr-lg`}
    onClick={() => onClick(id)}
  >
    {name}
  </button>
);

const SkillSlot = ({ skill }) => (
  <div className="aspect-square bg-white border border-gray-300 rounded-md flex flex-col justify-center items-center p-1 text-xs text-center">
    {skill && (
      <>
        <div className="font-bold mb-1 text-gray-800 truncate w-full">{skill.name}</div>
        <div className="text-gray-600">Ур. {skill.level}</div>
      </>
    )}
  </div>
);

const Skills = ({ skills }) => {
  const [activeCategory, setActiveCategory] = useState('all');

  const categories = [
    { id: 'all', name: 'Все' },
    { id: 'attack', name: 'Атака' },
    { id: 'defense', name: 'Защита' },
    { id: 'healing', name: 'Лечение' },
  ];

  const filteredSkills = skills.filter(skill => 
    activeCategory === 'all' || skill.category === activeCategory
  );

  return (
    <div>
      <div className="flex mt-4 overflow-auto">
        {categories.map(category => (
          <CategoryTab
            key={category.id}
            id={category.id}
            name={category.name}
            active={activeCategory === category.id}
            onClick={setActiveCategory}
          />
        ))}
      </div>
      <div className="grid grid-cols-4 sm:grid-cols-6 md:grid-cols-6 lg:grid-cols-6 gap-1 bg-gray-200 p-2 rounded-b-lg">
        {filteredSkills.map((skill, index) => (
          <SkillSlot key={index} skill={skill} />
        ))}
        {[...Array(24 - filteredSkills.length)].map((_, index) => (
          <SkillSlot key={`empty-${index}`} />
        ))}
      </div>
    </div>
  );
};

export default Skills;
