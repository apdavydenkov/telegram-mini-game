// Собранный код для папки client_src_components

// Код файла components\Admin\AdminGameItemForm.js:
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { APP_SERVER_URL } from '../../config/config';

const InputField = ({ label, name, value, onChange, type = 'text' }) => (
  <div className="flex justify-between items-center mb-2">
    <label className="text-right pr-2 w-1/2">{label}:</label>
    <input
      type={type}
      name={name}
      value={value}
      onChange={onChange}
      className="w-1/2 h-[25px] px-2 border rounded text-right"
    />
  </div>
);

const SelectField = ({ label, name, value, onChange, options }) => (
  <div className="flex justify-between items-center mb-2">
    <label className="text-right pr-2 w-1/2">{label}:</label>
    <select
      name={name}
      value={value}
      onChange={onChange}
      className="w-1/2 h-[25px] px-2 border rounded text-right"
    >
      {options.map(option => (
        <option key={option} value={option}>{option}</option>
      ))}
    </select>
  </div>
);

const CheckboxField = ({ label, name, value, onChange, options }) => (
  <div className="flex flex-col mb-2">
    <label className="font-bold mb-1">{label}:</label>
    <div className="flex flex-wrap">
      {options.map(option => (
        <div key={option} className="mr-4">
          <input
            type="checkbox"
            id={`${name}-${option}`}
            name={name}
            value={option}
            checked={value.includes(option)}
            onChange={onChange}
            className="mr-1"
          />
          <label htmlFor={`${name}-${option}`}>{option}</label>
        </div>
      ))}
    </div>
  </div>
);

const AdminGameItemForm = () => {
  const { id } = useParams();
  const navigate = useNavigate();
  const [gameItem, setGameItem] = useState({
    name: '',
    type: 'weapon',
    rarity: 'common',
    minLevel: 1,
    image: '',
    requiredClass: [],
    requiredStats: {
      strength: 0,
      dexterity: 0,
      intelligence: 0,
      endurance: 0,
      charisma: 0
    },
    description: '',
    stats: {
      strength: 0,
      dexterity: 0,
      intelligence: 0,
      endurance: 0,
      charisma: 0,
      damage: 0,
      armor: 0,
      criticalChance: 0,
      criticalDamage: 0,
      dodge: 0,
      healthRegenRate: 0,
      health: 0,
      counterAttack: 0
    }
  });
  const [error, setError] = useState('');

  useEffect(() => {
    if (id) {
      fetchGameItem();
    }
  }, [id]);

  const fetchGameItem = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        console.log('Токен отсутствует. Перенаправление на страницу входа.');
        navigate('/login');
        return;
      }
      const response = await axios.get(`${APP_SERVER_URL}/api/gameItem/${id}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setGameItem(response.data);
    } catch (error) {
      console.error('Ошибка получения игрового предмета:', error.response?.data || error.message);
      setError('Ошибка загрузки данных игрового предмета. Пожалуйста, попробуйте еще раз.');

      if (error.response && error.response.status === 401) {
        console.log('Токен недействителен. Перенаправление на страницу входа.');
        localStorage.removeItem('token');
        navigate('/login');
      }
    }
  };

  const handleChange = (e) => {
    const { name, value } = e.target;
    setGameItem(prev => ({ ...prev, [name]: value }));
  };

  const handleStatsChange = (e) => {
    const { name, value } = e.target;
    setGameItem(prev => ({
      ...prev,
      stats: { ...prev.stats, [name]: parseFloat(value) }
    }));
  };

  const handleRequiredStatsChange = (e) => {
    const { name, value } = e.target;
    setGameItem(prev => ({
      ...prev,
      requiredStats: { ...prev.requiredStats, [name]: parseFloat(value) }
    }));
  };

  const handleRequiredClassChange = (e) => {
    const { value, checked } = e.target;
    setGameItem(prev => ({
      ...prev,
      requiredClass: checked
        ? [...prev.requiredClass, value]
        : prev.requiredClass.filter(c => c !== value)
    }));
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        console.log('Токен отсутствует. Перенаправление на страницу входа.');
        navigate('/login');
        return;
      }
      if (id) {
        await axios.put(`${APP_SERVER_URL}/api/gameItem/${id}`, gameItem, {
          headers: { Authorization: `Bearer ${token}` }
        });
      } else {
        await axios.post(`${APP_SERVER_URL}/api/gameItem`, gameItem, {
          headers: { Authorization: `Bearer ${token}` }
        });
      }
      navigate('/admin/gameItem');
    } catch (error) {
      console.error('Ошибка сохранения игрового предмета:', error.response?.data || error.message);
      setError('Ошибка сохранения игрового предмета. Пожалуйста, проверьте данные и попробуйте еще раз.');

      if (error.response && error.response.status === 401) {
        console.log('Токен недействителен. Перенаправление на страницу входа.');
        localStorage.removeItem('token');
        navigate('/login');
      }
    }
  };

  return (
    <div className="container mx-auto px-4">
      <div className="bg-white shadow-md rounded px-8 pt-6 pb-8 mb-4">
        <h2 className="text-2xl font-bold mb-4">{id ? 'Редактирование' : 'Создание'} игрового предмета</h2>
        {error && <div className="mb-4 text-red-500">{error}</div>}
        <form onSubmit={handleSubmit} className="grid grid-cols-3 gap-4">
          <div>
            <InputField label="Название" name="name" value={gameItem.name} onChange={handleChange} />
            <SelectField
              label="Тип"
              name="type"
              value={gameItem.type}
              onChange={handleChange}
              options={['weapon', 'armor', 'banner', 'helmet', 'shield', 'cloak', 'belt', 'boots', 'useful']}
            />
            <SelectField
              label="Редкость"
              name="rarity"
              value={gameItem.rarity}
              onChange={handleChange}
              options={['common', 'uncommon', 'rare', 'epic', 'legendary']}
            />
            <InputField label="Изображение" name="image" value={gameItem.image} onChange={handleChange} />

            <textarea
              name="description"
              value={gameItem.description}
              onChange={handleChange}
              placeholder="Описание предмета"
              className="w-full px-2 py-1 border rounded"
              rows="4"
            />
          </div>
          <div>
            <h3 className="font-bold mb-2">Требуемые характеристики:</h3>
            <InputField label="Мин. уровень" name="minLevel" value={gameItem.minLevel} onChange={handleChange} type="number" />
            <InputField label="Сила" name="strength" value={gameItem.requiredStats.strength} onChange={handleRequiredStatsChange} type="number" />
            <InputField label="Ловкость" name="dexterity" value={gameItem.requiredStats.dexterity} onChange={handleRequiredStatsChange} type="number" />
            <InputField label="Интеллект" name="intelligence" value={gameItem.requiredStats.intelligence} onChange={handleRequiredStatsChange} type="number" />
            <InputField label="Выносливость" name="endurance" value={gameItem.requiredStats.endurance} onChange={handleRequiredStatsChange} type="number" />
            <InputField label="Харизма" name="charisma" value={gameItem.requiredStats.charisma} onChange={handleRequiredStatsChange} type="number" />
            <CheckboxField
              label="Требуемый класс"
              name="requiredClass"
              value={gameItem.requiredClass}
              onChange={handleRequiredClassChange}
              options={['Warrior', 'Mage', 'Archer']}
            />
          </div>
          <div>
            <h3 className="font-bold mb-2">Бонусы предмета:</h3>
            <InputField label="Сила" name="strength" value={gameItem.stats.strength} onChange={handleStatsChange} type="number" />
            <InputField label="Ловкость" name="dexterity" value={gameItem.stats.dexterity} onChange={handleStatsChange} type="number" />
            <InputField label="Интеллект" name="intelligence" value={gameItem.stats.intelligence} onChange={handleStatsChange} type="number" />
            <InputField label="Выносливость" name="endurance" value={gameItem.stats.endurance} onChange={handleStatsChange} type="number" />
            <InputField label="Харизма" name="charisma" value={gameItem.stats.charisma} onChange={handleStatsChange} type="number" />
            <InputField label="Урон" name="damage" value={gameItem.stats.damage} onChange={handleStatsChange} type="number" />
            <InputField label="Броня" name="armor" value={gameItem.stats.armor} onChange={handleStatsChange} type="number" />
            <InputField label="Шанс крита" name="criticalChance" value={gameItem.stats.criticalChance} onChange={handleStatsChange} type="number" />
            <InputField label="Сила крита" name="criticalDamage" value={gameItem.stats.criticalDamage} onChange={handleStatsChange} type="number" />
            <InputField label="Уворот" name="dodge" value={gameItem.stats.dodge} onChange={handleStatsChange} type="number" />
            <InputField label="Контрудар" name="counterAttack" value={gameItem.stats.counterAttack} onChange={handleStatsChange} type="number" />
            <InputField label="HP" name="health" value={gameItem.stats.health} onChange={handleStatsChange} type="number" />
            <InputField label="Реген HP" name="healthRegenRate" value={gameItem.stats.healthRegenRate} onChange={handleStatsChange} type="number" />
          </div>
          <div className="col-span-3 mt-4">
            <button type="submit" className="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded">
              {id ? 'Обновить предмет' : 'Создать предмет'}
            </button>
          </div>
        </form>
      </div>
    </div>
  );
};

export default AdminGameItemForm;

// Код файла components\Admin\AdminGameItemList.js:
import React, { useState, useEffect } from 'react';
import { Link, useNavigate } from 'react-router-dom';
import axios from 'axios';
import { APP_SERVER_URL } from '../../config/config';

const AdminGameItemList = () => {
  const navigate = useNavigate();
  const [gameItems, setGameItems] = useState([]);

  useEffect(() => {
    fetchGameItems();
  }, []);

  const fetchGameItems = async () => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        console.log('Токен отсутствует. Перенаправление на страницу входа.');
        navigate('/login');
        return;
      }
      const response = await axios.get(`${APP_SERVER_URL}/api/gameItem/`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setGameItems(response.data);
    } catch (error) {
      console.error('Error fetching game items:', error.response?.data || error.message);
    }
  };

  const handleDelete = async (gameItemId) => {
    if (window.confirm('Are you sure you want to delete this game item?')) {
      try {
        const token = localStorage.getItem('token');
        await axios.delete(`${APP_SERVER_URL}/api/gameItem/${gameItemId}`, {
          headers: { Authorization: `Bearer ${token}` }
        });
        fetchGameItems();
      } catch (error) {
        console.error('Error deleting game item:', error);
      }
    }
  };
  
  const handleSendGameItem = async (gameItemId) => {
    const characterId = prompt("Enter the character ID to send the game item to:");
    if (characterId) {
      try {
        const token = localStorage.getItem('token');
        await axios.post(`${APP_SERVER_URL}/api/gameItem/send/${gameItemId}/${characterId}`, 
          {},
          { headers: { Authorization: `Bearer ${token}` } }
        );
        alert('Game item sent successfully');
      } catch (error) {
        console.error('Error sending game item:', error.response?.data || error.message);
        alert(error.response?.data?.message || 'Error sending game item');
      }
    }
  };

  return (
    <div>
      <div className="flex justify-between items-center mb-6">
        <h2 className="text-2xl font-semibold text-gray-800">Game Items</h2>
        <Link to="/admin/gameItem/new" className="bg-blue-500 hover:bg-blue-600 text-white px-4 py-2 rounded-md transition-colors">
          Create New
        </Link>
      </div>
      <div className="bg-white shadow-md rounded-lg overflow-hidden">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Rarity</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Min Level</th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {gameItems.map((gameItem) => (
              <tr key={gameItem._id}>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex items-center">
                    <div className="flex-shrink-0 h-10 w-10">
                      <img className="h-10 w-10" src={gameItem.image || "https://placehold.co/150"} alt={gameItem.name} />
                    </div>
                    <div className="ml-4">
                      <div className="text-sm font-medium text-gray-900">{gameItem.name}</div>
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{gameItem.type}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{gameItem.rarity}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{gameItem.minLevel}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <Link to={`/admin/gameItem/edit/${gameItem._id}`} className="text-indigo-600 hover:text-indigo-900 mr-3">Edit</Link>
                  <button onClick={() => handleDelete(gameItem._id)} className="text-red-600 hover:text-red-900 mr-3">Delete</button>
                  <button onClick={() => handleSendGameItem(gameItem._id)} className="text-green-600 hover:text-green-900">Send</button>
                </td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default AdminGameItemList;

// Код файла components\Admin\AdminPanel.js:
import React from 'react';
import { Link, Route, Routes } from 'react-router-dom';
import AdminGameItemList from './AdminGameItemList';
import AdminGameItemForm from './AdminGameItemForm';

const AdminPanel = () => {
  return (
    <div className="flex h-screen bg-gray-100">
      <aside className="w-64 bg-white shadow-md">
        <div className="p-4">
          <h1 className="text-xl font-semibold text-gray-800">Admin Panel</h1>
        </div>
        <nav className="mt-4">
          <Link to="/admin/gameItem" className="block py-2 px-4 text-gray-600 hover:bg-gray-200 transition-colors">
            Game Items
          </Link>
          {/* Add more menu items as needed */}
        </nav>
      </aside>
      <main className="flex-1 p-8">
        <Routes>
          <Route path="gameItem" element={<AdminGameItemList />} />
          <Route path="gameItem/new" element={<AdminGameItemForm />} />
          <Route path="gameItem/edit/:id" element={<AdminGameItemForm />} />
        </Routes>
      </main>
    </div>
  );
};

export default AdminPanel;

// Код файла components\Auth\Login.js:
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate, Link } from 'react-router-dom';
import { APP_SERVER_URL } from '../../config/config';

const Login = () => {
  const [username, setUsername] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError(''); // Сбрасываем ошибку перед новой попыткой
    try {
      const response = await axios.post(`${APP_SERVER_URL}/api/auth/login`, { username, password });
      localStorage.setItem('token', response.data.token);
      localStorage.setItem('user', JSON.stringify(response.data.user));      
      navigate('/dashboard');
    } catch (error) {
      console.error('Ошибка входа:', error);
      setError(error.response?.data?.message || 'Произошла ошибка при входе');
    }
  };

  return (
    <div>
      <h2 className="mt-6 text-center text-3xl font-extrabold text-gray-900">Вход</h2>
      {error && <div className="mt-2 text-center text-sm text-red-600">{error}</div>}
      <form className="space-y-6" onSubmit={handleSubmit}>
        <div>
          <label htmlFor="username" className="block text-sm font-medium text-gray-700">Имя пользователя</label>
          <div className="mt-1">
            <input
              id="username"
              name="username"
              type="text"
              required
              className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
            />
          </div>
        </div>
        <div>
          <label htmlFor="password" className="block text-sm font-medium text-gray-700">Пароль</label>
          <div className="mt-1">
            <input
              id="password"
              name="password"
              type="password"
              required
              className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
            />
          </div>
        </div>
        <div>
          <button
            type="submit"
            className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
          >
            Войти
          </button>
        </div>
      </form>
      <div className="mt-6">
        <Link
          to="/register"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-indigo-600 bg-indigo-100 hover:bg-indigo-200"
        >
          Нет аккаунта? Зарегистрироваться
        </Link>
      </div>
    </div>
  );
};

export default Login;


// Код файла components\Auth\Register.js:
import React, { useState } from 'react';
import axios from 'axios';
import { useNavigate, Link } from 'react-router-dom';
import { APP_SERVER_URL } from '../../config/config';

const Register = () => {
  const [username, setUsername] = useState('');
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [error, setError] = useState('');
  const navigate = useNavigate();

  const handleSubmit = async (e) => {
    e.preventDefault();
    setError('');
    try {
      console.log('Attempting to register user:', username);
      const response = await axios.post(`${APP_SERVER_URL}/api/auth/register`, { username, email, password });
      console.log('Registration response:', response.data);
      
      if (response.data.token) {
        localStorage.setItem('token', response.data.token);
        console.log('Token saved to localStorage');
        navigate('/dashboard');
      } else {
        console.error('No token received after registration');
        setError('Registration failed: No token received');
      }
    } catch (error) {
      console.error('Registration error:', error.response?.data?.message || error.message);
      setError(error.response?.data?.message || 'An error occurred during registration');
    }
  };

  return (
    <div className="max-w-md mx-auto mt-8">
      <div className="bg-white py-8 px-4 shadow sm:rounded-lg sm:px-10">
        <h2 className="text-3xl font-extrabold text-gray-900 text-center mb-6">Регистрация</h2>
        {error && <div className="text-red-600 mb-4">{error}</div>}
        <form onSubmit={handleSubmit} className="space-y-6">
          <div>
            <label htmlFor="username" className="block text-sm font-medium text-gray-700">Имя пользователя</label>
            <input
              id="username"
              name="username"
              type="text"
              value={username}
              onChange={(e) => setUsername(e.target.value)}
              required
              className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
          <div>
            <label htmlFor="email" className="block text-sm font-medium text-gray-700">Email</label>
            <input
              id="email"
              name="email"
              type="email"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              required
              className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
          <div>
            <label htmlFor="password" className="block text-sm font-medium text-gray-700">Пароль</label>
            <input
              id="password"
              name="password"
              type="password"
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              required
              className="appearance-none block w-full px-3 py-2 border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"
            />
          </div>
          <div>
            <button
              type="submit"
              className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-green-600 hover:bg-green-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-green-500"
            >
              Зарегистрироваться
            </button>
          </div>
        </form>
        <div className="mt-4 text-sm text-center text-gray-600">
          Уже есть аккаунт?{' '}
          <Link to="/login" className="text-indigo-600 hover:text-indigo-800">
            Войти
          </Link>
        </div>
      </div>
    </div>
  );
};

export default Register;


// Код файла components\Character\Character.js:
// ВАЖНО: Порядок и структура div элементов в этом файле критически важны для вёрстки.
// НЕ ИЗМЕНЯЙТЕ порядок или структуру div элементов без крайней необходимости.
// Любые изменения могут нарушить макет персонажа.

import React, { useState, useCallback } from 'react';
import CharItemInfo from '../Inventory/CharItemInfo';

const EquipmentSlot = ({ slot, item, onUnequip, onShowInfo }) => {
  const [pressTimer, setPressTimer] = useState(null);

  const handleMouseDown = useCallback(() => {
    setPressTimer(setTimeout(() => {
      if (item) {
        onShowInfo(item);
      }
    }, 1000));
  }, [item, onShowInfo]);

  const handleMouseUp = () => {
    clearTimeout(pressTimer);
  };

  const handleClick = () => {
    if (item) {
      onUnequip(item._id);
    }
  };

  return (
    <div 
      className="w-full h-full flex items-center justify-center cursor-pointer"
      onClick={handleClick}
      onMouseDown={handleMouseDown}
      onMouseUp={handleMouseUp}
      onMouseLeave={handleMouseUp}
      onTouchStart={handleMouseDown}
      onTouchEnd={handleMouseUp}
    >
      {item ? (
        <div className="w-full h-full relative">
          <img 
            src={item.gameItem.image || `https://placehold.co/60x60?text=${slot}`} 
            alt={item.gameItem.name} 
            className="w-full h-full object-cover"
          />
          <div className="absolute inset-0 bg-black bg-opacity-30 flex items-center justify-center">
            <div className="text-white text-xs font-bold bg-gray-800 bg-opacity-75 px-1 py-0.5 rounded">
              {item.gameItem.name}
            </div>
          </div>
        </div>
      ) : (
        <img 
          src={`https://placehold.co/60x60?text=${slot}`} 
          alt={slot} 
          className="w-full h-full object-cover"
        />
      )}
    </div>
  );
};

const Character = ({ character, onUnequipItem }) => {
  const [selectedItem, setSelectedItem] = useState(null);

  if (!character) {
    return <div>Загрузка персонажа...</div>;
  }

  const currentHealth = Math.round(character.healthData.currentHealth);
  const maxHealth = character.healthData.maxHealth;

  const handleShowInfo = (item) => {
    setSelectedItem(item);
  };

  const getEquippedItem = (slot) => {
    return character.inventory && character.inventory.find(charItem => charItem.isEquipped && charItem.slot === slot);
  };

  return (
    <div className="w-full max-w-3xl mx-auto bg-gray-100 p-2 rounded-lg shadow-md">
      <div className="grid grid-cols-12 grid-rows-17 gap-1">
        <div className="col-span-12 text-center text-xl font-bold flex items-center justify-center">
          {character.nickname}
          <span className="ml-2 bg-blue-500 text-white rounded-md w-6 h-6 flex items-center justify-center text-sm">
            {character.level}
          </span>
          <span className="ml-2 bg-gray-300 text-gray-800 rounded-md px-2 py-1 text-xs">
            {character.status}
          </span>
        </div>
        
        <div className="col-span-6 col-start-4 row-start-2 bg-yellow-200 rounded-md overflow-hidden relative h-6">
          <div
            className="h-full bg-yellow-400 absolute left-0 top-0"
            style={{ width: `${(character.experience / 100) * 100}%` }}
          />
          <div className="absolute inset-0 flex items-center justify-center text-xs font-bold">
            EXP: {character.experience}/100
          </div>
        </div>
        
        <div className="col-span-6 col-start-4 row-start-3 bg-red-200 rounded-md overflow-hidden relative h-6">
          <div
            className="h-full bg-red-500 absolute left-0 top-0"
            style={{ width: `${(currentHealth / maxHealth) * 100}%` }}
          />
          <div className="absolute inset-0 flex items-center justify-center text-xs font-bold text-white">
            HP: {currentHealth}/{maxHealth}
          </div>
        </div>

        <div className="col-span-6 row-span-8 col-start-4 row-start-4 bg-gray-300 rounded-md flex items-center justify-center">
          <img src="https://placehold.co/200x300?text=Character" alt="Character Silhouette" className="w-full h-full object-cover rounded-md" />
        </div>

        <div className="col-span-3 row-span-3 row-start-2 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <EquipmentSlot slot="banner" item={getEquippedItem('banner')} onUnequip={onUnequipItem} onShowInfo={handleShowInfo} />
        </div>
        <div className="col-span-3 row-span-3 col-start-10 row-start-2 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <EquipmentSlot slot="helmet" item={getEquippedItem('helmet')} onUnequip={onUnequipItem} onShowInfo={handleShowInfo} />
        </div>
        <div className="col-span-3 row-span-3 row-start-5 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <EquipmentSlot slot="weapon" item={getEquippedItem('weapon')} onUnequip={onUnequipItem} onShowInfo={handleShowInfo} />
        </div>
        <div className="col-span-3 row-span-3 col-start-10 row-start-5 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <EquipmentSlot slot="shield" item={getEquippedItem('shield')} onUnequip={onUnequipItem} onShowInfo={handleShowInfo} />
        </div>
        <div className="col-span-3 row-span-3 row-start-8 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <EquipmentSlot slot="armor" item={getEquippedItem('armor')} onUnequip={onUnequipItem} onShowInfo={handleShowInfo} />
        </div>
        <div className="col-span-3 row-span-3 col-start-10 row-start-8 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <EquipmentSlot slot="cloak" item={getEquippedItem('cloak')} onUnequip={onUnequipItem} onShowInfo={handleShowInfo} />
        </div>
        <div className="col-span-3 row-span-3 row-start-11 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <EquipmentSlot slot="belt" item={getEquippedItem('belt')} onUnequip={onUnequipItem} onShowInfo={handleShowInfo} />
        </div>
        <div className="col-span-3 row-span-3 col-start-10 row-start-11 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <EquipmentSlot slot="boots" item={getEquippedItem('boots')} onUnequip={onUnequipItem} onShowInfo={handleShowInfo} />
        </div>

        <div className="col-span-2 row-span-2 col-start-4 row-start-15 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <EquipmentSlot slot="useful1" item={getEquippedItem('useful1')} onUnequip={onUnequipItem} onShowInfo={handleShowInfo} />
        </div>
        <div className="col-span-2 row-span-2 col-start-6 row-start-15 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <EquipmentSlot slot="useful2" item={getEquippedItem('useful2')} onUnequip={onUnequipItem} onShowInfo={handleShowInfo} />
        </div>
        <div className="col-span-2 row-span-2 col-start-8 row-start-15 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <EquipmentSlot slot="useful3" item={getEquippedItem('useful3')} onUnequip={onUnequipItem} onShowInfo={handleShowInfo} />
        </div>

        <div className="col-span-2 row-span-2 row-start-16 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <img src="https://placehold.co/40x40?text=Skill+1" alt="Skill 1" className="w-full h-full object-cover" />
        </div>
        <div className="col-span-2 row-span-2 col-start-3 row-start-16 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <img src="https://placehold.co/40x40?text=Skill+2" alt="Skill 2" className="w-full h-full object-cover" />
        </div>
        <div className="col-span-2 row-span-2 col-start-5 row-start-16 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <img src="https://placehold.co/40x40?text=Skill+3" alt="Skill 3" className="w-full h-full object-cover" />
        </div>
        <div className="col-span-2 row-span-2 col-start-7 row-start-16 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <img src="https://placehold.co/40x40?text=Skill+4" alt="Skill 4" className="w-full h-full object-cover" />
        </div>
        <div className="col-span-2 row-span-2 col-start-9 row-start-16 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <img src="https://placehold.co/40x40?text=Skill+5" alt="Skill 5" className="w-full h-full object-cover" />
        </div>
        <div className="col-span-2 row-span-2 col-start-11 row-start-16 bg-white rounded-md flex items-center justify-center overflow-hidden">
          <img src="https://placehold.co/40x40?text=Skill+6" alt="Skill 6" className="w-full h-full object-cover" />
        </div>

        <div className="col-span-3 row-span-1 col-start-1 row-start-17 bg-yellow-300 rounded-md flex items-center justify-center overflow-hidden">
          <span className="font-bold text-yellow-800">Gold: {character.gold}</span>
        </div>
      </div>
      {selectedItem && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <CharItemInfo 
            charItem={selectedItem} 
            onClose={() => setSelectedItem(null)} 
            character={character}
          />
        </div>
      )}
    </div>
  );
};

export default Character;

// Код файла components\Character\CharacterCreate.js:
import React, { useState } from 'react';
import axios from 'axios';
import { APP_SERVER_URL } from '../../config/config';

const CharacterCreate = ({ onCharacterCreated }) => {
  const [nickname, setNickname] = useState('');
  const [characterClass, setCharacterClass] = useState('Warrior');
  const [baseStrength, setBaseStrength] = useState(10);
  const [baseDexterity, setBaseDexterity] = useState(10);
  const [baseIntelligence, setBaseIntelligence] = useState(10);
  const [baseEndurance, setBaseEndurance] = useState(10);
  const [baseCharisma, setBaseCharisma] = useState(10);
  const [availablePoints, setAvailablePoints] = useState(5);

  const handleStatChange = (stat, value) => {
    if (availablePoints > 0 || value < 0) {
      const statSetters = {
        baseStrength: setBaseStrength,
        baseDexterity: setBaseDexterity,
        baseIntelligence: setBaseIntelligence,
        baseEndurance: setBaseEndurance,
        baseCharisma: setBaseCharisma
      };

      const currentValue = {
        baseStrength, baseDexterity, baseIntelligence, baseEndurance, baseCharisma
      }[stat];

      if (statSetters[stat]) {
        statSetters[stat](Math.max(10, currentValue + value));
        setAvailablePoints(prev => prev - value);
      }
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    try {
      const token = localStorage.getItem('token');
      const response = await axios.post(`${APP_SERVER_URL}/api/character`,
        { nickname, class: characterClass, baseStrength, baseDexterity, baseIntelligence, baseEndurance, baseCharisma },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      onCharacterCreated(response.data);
    } catch (error) {
      console.error('Error creating character:', error);
    }
  };

  return (
    <div className="max-w-md mx-auto bg-white p-6 rounded-lg shadow-md">
      <h2 className="text-2xl font-bold mb-4">Create Character</h2>
      <form onSubmit={handleSubmit}>
        <input
          type="text"
          placeholder="Character Nickname"
          value={nickname}
          onChange={(e) => setNickname(e.target.value)}
          className="w-full p-2 mb-4 border rounded"
          required
        />
        <select
          value={characterClass}
          onChange={(e) => setCharacterClass(e.target.value)}
          className="w-full p-2 mb-4 border rounded"
        >
          <option value="Warrior">Warrior</option>
          <option value="Mage">Mage</option>
          <option value="Archer">Archer</option>
        </select>
        <p className="mb-2">Available points: {availablePoints}</p>
        {['baseStrength', 'baseDexterity', 'baseIntelligence', 'baseEndurance', 'baseCharisma'].map((stat) => (
          <div key={stat} className="flex justify-between items-center mb-2">
            <span className="capitalize">{stat.replace('base', '')}: {eval(stat)}</span>
            <div>
              <button type="button" onClick={() => handleStatChange(stat, -1)} className="px-2 py-1 bg-red-500 text-white rounded mr-2" disabled={eval(stat) <= 10}>-</button>
              <button type="button" onClick={() => handleStatChange(stat, 1)} className="px-2 py-1 bg-green-500 text-white rounded" disabled={availablePoints <= 0}>+</button>
            </div>
          </div>
        ))}
        <button type="submit" className="w-full p-2 bg-blue-500 text-white rounded hover:bg-blue-600">Create Character</button>
      </form>
    </div>
  );
};

export default CharacterCreate;

// Код файла components\Character\CharacterStats.js:
import React from 'react';
import { FaDumbbell, FaRunning, FaBrain, FaHeart, FaSmile, FaFistRaised, FaShieldAlt, FaBullseye, FaWind, FaHeartbeat, FaStar, FaBolt, FaBalanceScale } from 'react-icons/fa';

const CharacterStats = ({ character, onCharacterUpdate, isUpdating, error }) => {
  const calculateTotalStat = (baseStat, statName) => {
    if (!character || !character.inventory) return baseStat;

    const equippedItems = character.inventory.filter(item => item.isEquipped);
    const bonusStat = equippedItems.reduce((sum, item) => sum + (item.gameItem?.stats?.[statName] || 0), 0);
    return baseStat + bonusStat;
  };

  const handleStatIncrease = async (stat) => {
    if (character.zeroPoints || isUpdating) return;

    const updatedCharacter = {
      ...character,
      [`base${stat.charAt(0).toUpperCase() + stat.slice(1)}`]: character[`base${stat.charAt(0).toUpperCase() + stat.slice(1)}`] + 1,
      availablePoints: character.availablePoints - 1,
      version: character.version
    };

    await onCharacterUpdate(updatedCharacter);
  };

  const StatParam = ({ icon: Icon, label, value, maxValue, stat, isAdjustable = true }) => {
    if (!stat && value === undefined) return null;

    const baseValue = character[`base${stat?.charAt(0).toUpperCase() + stat?.slice(1)}`] || 0;
    const totalValue = stat ? calculateTotalStat(baseValue, stat.toLowerCase()) : value;
    const bonusValue = stat ? totalValue - baseValue : 0;

    const formatValue = (val) => {
      if (typeof val === 'number') {
        if (['strength', 'dexterity', 'intelligence', 'endurance', 'charisma'].includes(stat)) {
          return Math.round(val);
        }
        return val.toFixed(2);
      }
      return val;
    };

    return (
      <div className="flex justify-between items-center p-2 bg-white rounded-lg shadow-sm mb-2">
        <span className="flex items-center text-gray-700">
          <Icon className="mr-2 text-blue-500" />
          {label}:
        </span>
        <div className="flex items-center">
          <span className="font-semibold text-blue-600 mx-2">
            {maxValue !== undefined ? `${formatValue(totalValue)}/${formatValue(maxValue)}` : formatValue(totalValue)}
            {bonusValue > 0 && <span className="text-green-500 ml-1">(+{formatValue(bonusValue)})</span>}
          </span>
          {isAdjustable && !character.zeroPoints && character.availablePoints > 0 && (
            <button
              onClick={() => handleStatIncrease(stat)}
              className={`w-6 h-6 ${isUpdating ? 'bg-gray-400 cursor-not-allowed' : 'bg-green-500 hover:bg-green-600'} text-white rounded transition-colors duration-200`}
              disabled={isUpdating}
            >
              +
            </button>
          )}
        </div>
      </div>
    );
  };

  if (!character || !character.calculatedStats) {
    return <div>Загрузка характеристик...</div>;
  }

  const { calculatedStats } = character;

  return (
    <div className="relative grid grid-cols-1 md:grid-cols-2 gap-4">
      {error && <div className="col-span-2 text-red-500 mb-4">{error}</div>}
      <div>
        <h3 className="text-lg font-bold mb-3 text-gray-800">Базовые параметры</h3>
        <StatParam icon={FaDumbbell} label="Сила" value={calculateTotalStat(character.baseStrength, 'strength')} stat="strength" />
        <StatParam icon={FaRunning} label="Ловкость" value={calculateTotalStat(character.baseDexterity, 'dexterity')} stat="dexterity" />
        <StatParam icon={FaBrain} label="Интеллект" value={calculateTotalStat(character.baseIntelligence, 'intelligence')} stat="intelligence" />
        <StatParam icon={FaHeart} label="Выносливость" value={calculateTotalStat(character.baseEndurance, 'endurance')} stat="endurance" />
        <StatParam icon={FaSmile} label="Харизма" value={calculateTotalStat(character.baseCharisma, 'charisma')} stat="charisma" />
        {character.availablePoints > 0 && !character.zeroPoints && (
          <div className="bg-yellow-300 flex items-center p-2 bg-white rounded-lg shadow-sm mb-2 font-semibold text-red-600 animate-pulse">
            <FaStar className="mr-2 text-yellow-500" />
            Доступные навыки: {character.availablePoints}
          </div>
        )}
      </div>
      <div>
        <h3 className="text-lg font-bold mb-3 text-gray-800">Боевые характеристики</h3>
        <StatParam icon={FaFistRaised} label="Урон" value={calculatedStats.damage} isAdjustable={false} />
        <StatParam icon={FaShieldAlt} label="Броня" value={calculatedStats.armor} isAdjustable={false} />
        <StatParam icon={FaBullseye} label="Шанс крита" value={`${calculatedStats.criticalChance.toFixed(2)}%`} isAdjustable={false} />
        <StatParam icon={FaBolt} label="Сила крита" value={`${calculatedStats.criticalDamage.toFixed(2)}%`} isAdjustable={false} />
        <StatParam icon={FaWind} label="Уворот" value={`${calculatedStats.dodge.toFixed(2)}%`} isAdjustable={false} />
        <StatParam icon={FaBalanceScale} label="Контрудар" value={`${calculatedStats.counterAttack.toFixed(2)}%`} isAdjustable={false} />
        <StatParam icon={FaHeartbeat} label="Реген здоровья" value={`${calculatedStats.healthRegenRate.toFixed(2)}/сек`} isAdjustable={false} />
      </div>
    </div>
  );
};

export default CharacterStats;

// Код файла components\Character\CharacterStatus.js:
 


// Код файла components\Character\LevelUp.js:
 


// Код файла components\Combat\BattleArena.js:
 


// Код файла components\Combat\SkillSelection.js:
 


// Код файла components\Dashboard\Dashboard.js:
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import Character from '../Character/Character';
import CharacterStats from '../Character/CharacterStats';
import CreateCharacter from '../Character/CharacterCreate';
import Inventory from '../Inventory/Inventory';
import Skills from '../Skills/Skills';
import useAuth from '../../hooks/useAuth';
import useCharacter from '../../hooks/useCharacter';

const Tab = ({ label, active, onClick }) => (
  <button
    className={`px-4 py-2 font-bold transition-colors duration-200 
      ${active ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}
      first:rounded-tl-lg last:rounded-tr-lg`}
    onClick={onClick}
  >
    {label}
  </button>
);

const TabContent = ({ children }) => (
  <div className="w-full max-w-3xl mx-auto bg-gray-100 p-2 rounded-lg shadow-md">
    {children}
  </div>
);

const Dashboard = () => {
  const [activeTab, setActiveTab] = useState('characterstats');
  const [equipError, setEquipError] = useState('');
  const navigate = useNavigate();
  const { user, loading: authLoading, logout } = useAuth();
  const {
    character,
    loading: characterLoading,
    error,
    isUpdating,
    updateCharacter,
    equipItem,
    fetchCharacter
  } = useCharacter();

  if (authLoading || characterLoading) {
    return <div className="text-center p-4">Загрузка...</div>;
  }

  if (!user) {
    navigate('/login');
    return null;
  }

  const handleCharacterUpdate = async (updatedCharacter) => {
    await updateCharacter(updatedCharacter);
  };

  const canEquipItem = (item) => {
    if (!item || !item.gameItem) return false;
    if (character.level < item.gameItem.minLevel) return false;
    if (item.gameItem.requiredClass.length && !item.gameItem.requiredClass.includes(character.class)) return false;
    for (const [stat, value] of Object.entries(item.gameItem.requiredStats)) {
      if (character[`base${stat.charAt(0).toUpperCase() + stat.slice(1)}`] < value) return false;
    }
    return true;
  };

  const handleEquipItem = async (itemId) => {
    const item = character.inventory.find(i => i._id === itemId);
    if (item.isEquipped || canEquipItem(item)) {
      const result = await equipItem(itemId);
      setEquipError(result.success ? '' : result.message);
    } else {
      setEquipError('Не выполнены минимальные требования для надевания этого предмета.');
    }
  };

  const handleUnequipItem = async (itemId) => {
    await equipItem(itemId); // Используем ту же функцию, что и для экипировки
  };

  const handleCharacterCreated = () => {
    fetchCharacter();
  };

  const handleLogout = () => {
    logout();
    navigate('/login');
  };

  const renderContent = () => {
    if (!character) {
      return (
        <div className="bg-white p-4 rounded-lg shadow-lg">
          <h2 className="text-2xl font-bold mb-4">Создание персонажа</h2>
          <CreateCharacter onCharacterCreated={handleCharacterCreated} />
        </div>
      );
    }

    return (
      <>
        <Character
          character={character}
          onUnequipItem={handleUnequipItem}
        />
        <div className="w-full max-w-3xl mx-auto bg-gray-100 p-2 rounded-lg shadow-md">
          <Tab label="Характеристики" active={activeTab === 'characterstats'} onClick={() => setActiveTab('characterstats')} />
          <Tab label="Инвентарь" active={activeTab === 'inventory'} onClick={() => setActiveTab('inventory')} />
          <Tab label="Навыки" active={activeTab === 'skills'} onClick={() => setActiveTab('skills')} />
        </div>
        <TabContent>
          {activeTab === 'characterstats' && (
            <CharacterStats
              character={character}
              onCharacterUpdate={handleCharacterUpdate}
              isUpdating={isUpdating}
              error={error}
            />
          )}
          {activeTab === 'inventory' && (
            <Inventory
              inventory={character.inventory || []}
              onClickInventoryItem={handleEquipItem}
              equipError={equipError}
              canEquipItem={canEquipItem}
              character={character}
            />
          )}
          {activeTab === 'skills' && <Skills skills={character.skills || []} />}
        </TabContent>
      </>
    );
  };

  return (
    <div className="max-w-4xl mx-auto bg-white p-4 rounded-lg shadow-lg">
      <div className="flex justify-between items-center mb-4">
        <h1 className="text-2xl font-bold">Добро пожаловать, {user.username}!</h1>
        <button
          onClick={handleLogout}
          className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded transition-colors duration-200"
        >
          Выйти
        </button>
      </div>

      {error && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
          <strong className="font-bold">Ошибка!</strong>
          <span className="block sm:inline"> {error}</span>
        </div>
      )}

      {renderContent()}
    </div>
  );
};

export default Dashboard;

// Код файла components\Inventory\CharItemInfo.js:
import React from 'react';

const CharItemInfo = ({ charItem, onClose, character }) => {
  if (!charItem || !charItem.gameItem) return null;

  const { gameItem } = charItem;

  const isStatInsufficient = (stat, requiredValue) => {
    const characterStat = character[`base${stat.charAt(0).toUpperCase() + stat.slice(1)}`];
    return characterStat < requiredValue;
  };

  return (
    <div className="bg-white rounded-lg shadow-xl overflow-hidden max-w-md w-full">
      <div className="relative p-6 bg-gradient-to-r from-blue-500 to-purple-600">
        <h2 className="text-2xl font-bold text-white mb-2">{gameItem.name}</h2>
        <p className="text-blue-100">{gameItem.type} - {gameItem.rarity}</p>
        <button onClick={onClose} className="absolute top-4 right-4 text-white hover:text-gray-200">
          <svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>
      <div className="p-6">
        <div className="flex mb-4">
          <img src={gameItem.image || "https://placehold.co/100x100?text=No+Image"} alt={gameItem.name} className="w-24 h-24 object-cover mr-4 rounded-lg shadow" />
          <div>
            <p className="mb-1"><span className="font-semibold">Мин. уровень:</span> 
              <span className={character.level < gameItem.minLevel ? "text-red-500 font-bold" : ""}> {gameItem.minLevel}</span>
            </p>
            <p className="mb-1"><span className="font-semibold">Класс:</span> 
              <span className={!gameItem.requiredClass.includes(character.class) ? "text-red-500 font-bold" : ""}> {gameItem.requiredClass.join(', ')}</span>
            </p>
          </div>
        </div>
        {Object.keys(gameItem.requiredStats).some(stat => gameItem.requiredStats[stat] > 0) && (
          <div className="mb-4">
            <h3 className="font-bold mb-2">Требуемые характеристики:</h3>
            <div className="grid grid-cols-2 gap-2">
              {Object.entries(gameItem.requiredStats).map(([stat, value]) => (
                value > 0 && (
                  <p key={stat} className={isStatInsufficient(stat, value) ? "text-red-500 font-bold" : ""}>
                    <strong>{stat}:</strong> {value}
                  </p>
                )
              ))}
            </div>
          </div>
        )}
        <div className="mb-4">
          <h3 className="font-bold mb-2">Бонусы:</h3>
          <div className="grid grid-cols-2 gap-2">
            {Object.entries(gameItem.stats).map(([stat, value]) => (
              value !== 0 && <p key={stat}><strong>{stat}:</strong> {value > 0 ? '+' : ''}{value}</p>
            ))}
          </div>
        </div>
        {gameItem.description && (
          <p className="text-sm italic text-gray-600">{gameItem.description}</p>
        )}
        {charItem.isEquipped && (
          <p className="mt-4 text-green-600 font-bold">Экипировано</p>
        )}
      </div>
    </div>
  );
};

export default CharItemInfo;

// Код файла components\Inventory\Inventory.js:
import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import { APP_SERVER_URL } from '../../config/config';
import CharItemInfo from './CharItemInfo';

const InventorySlot = ({ inventoryItem, onClickInventoryItem, onShowInfo, canEquipItem }) => {
  const [itemDetails, setItemDetails] = useState(null);
  const [pressTimer, setPressTimer] = useState(null);

  useEffect(() => {
    if (inventoryItem) {
      fetchItemDetails(inventoryItem._id);
    }
  }, [inventoryItem]);

  const fetchItemDetails = async (id) => {
    try {
      const token = localStorage.getItem('token');
      if (!token) {
        console.log('Токен отсутствует.');
        return;
      }
      const response = await axios.get(`${APP_SERVER_URL}/api/charItem/${id}`, {
        headers: { Authorization: `Bearer ${token}` }
      });
      setItemDetails(response.data);
    } catch (error) {
      console.error('Error fetching item details:', error.response?.data || error.message);
    }
  };

  const handleMouseDown = useCallback(() => {
    setPressTimer(setTimeout(() => {
      if (itemDetails) {
        onShowInfo(itemDetails);
      }
    }, 1000));
  }, [itemDetails, onShowInfo]);

  const handleMouseUp = () => {
    clearTimeout(pressTimer);
  };

  const handleClick = () => {
    if (itemDetails) {
      if (canEquipItem(itemDetails)) {
        onClickInventoryItem(inventoryItem._id);
      } else {
        onShowInfo(itemDetails);
      }
    }
  };

  useEffect(() => {
    return () => {
      if (pressTimer) clearTimeout(pressTimer);
    };
  }, [pressTimer]);

  return (
    <div
      className={`aspect-square border border-gray-300 rounded-md flex flex-col justify-end items-center p-1 text-xs text-center cursor-pointer transition-colors duration-200 hover:bg-gray-100 overflow-hidden relative ${itemDetails ? 'bg-cover bg-center' : 'bg-transparent'}`}
      style={itemDetails?.gameItem ? { backgroundImage: `url(${itemDetails.gameItem.image || "https://placehold.co/100"})` } : {}}
      onClick={handleClick}
      onMouseDown={handleMouseDown}
      onMouseUp={handleMouseUp}
      onMouseLeave={handleMouseUp}
      onTouchStart={handleMouseDown}
      onTouchEnd={handleMouseUp}
    >
      {itemDetails && (
        <>
          <div className="absolute inset-0 bg-black bg-opacity-30"></div>
          <div className="relative z-10 bg-gray-800 bg-opacity-75 text-white px-1 py-0.5 rounded">
            <div className="font-bold truncate w-full">{itemDetails.gameItem.name}</div>
            <div>x{itemDetails.quantity}</div>
          </div>
          {itemDetails.isEquipped && (
            <div className="absolute top-0 right-0 bg-green-500 text-white text-xs px-1 rounded-bl">
              Экипировано
            </div>
          )}
        </>
      )}
    </div>
  );
};

const Inventory = ({ inventory, onClickInventoryItem, equipError, canEquipItem, character }) => {
  const [filteredInventory, setFilteredInventory] = useState([]);
  const [activeCategory, setActiveCategory] = useState('all');
  const [selectedItem, setSelectedItem] = useState(null);

  const categories = [
    { id: 'all', name: 'Все' },
    { id: 'weapon', name: 'Оружие' },
    { id: 'armor', name: 'Броня' },
    { id: 'cloack', name: 'Плащи' },
    { id: 'helmet', name: 'Шлемы' },
    { id: 'belt', name: 'Пояса' },
    { id: 'boots', name: 'Обувь' },
    { id: 'banner', name: 'Знамя' },
    { id: 'useful', name: 'Полезное' },
  ];

  useEffect(() => {
    filterInventory();
  }, [inventory, activeCategory]);

  const filterInventory = () => {
    if (activeCategory === 'all') {
      setFilteredInventory(inventory);
    } else {
      const filtered = inventory.filter(item => item.gameItem?.type === activeCategory);
      setFilteredInventory(filtered);
    }
  };

  const handleCategoryChange = (categoryId) => {
    setActiveCategory(categoryId);
  };

  const handleShowInfo = (item) => {
    setSelectedItem(item);
  };

  return (
    <div>
      <div className="flex mt-4 overflow-auto">
        {categories.map(category => (
          <button
            key={category.id}
            className={`px-4 py-2 font-bold transition-colors duration-200 
              ${activeCategory === category.id ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}
              first:rounded-tl-lg last:rounded-tr-lg`}
            onClick={() => handleCategoryChange(category.id)}
          >
            {category.name}
          </button>
        ))}
      </div>
      {equipError && (
        <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mb-4" role="alert">
          <span className="block sm:inline">{equipError}</span>
        </div>
      )}
      <div className="grid grid-cols-4 sm:grid-cols-6 md:grid-cols-6 lg:grid-cols-6 gap-1 bg-gray-200 p-2 rounded-b-lg">
        {filteredInventory.map((item, index) => (
          <InventorySlot
            key={`${item._id}-${index}`}
            inventoryItem={item}
            onClickInventoryItem={onClickInventoryItem}
            onShowInfo={handleShowInfo}
            canEquipItem={canEquipItem}
          />
        ))}
        {Array.from({ length: Math.max(0, 24 - filteredInventory.length) }).map((_, index) => (
          <div
            key={`empty-${index}`}
            className="aspect-square bg-white border border-gray-300 rounded-md flex flex-col justify-center items-center p-1 text-xs text-center"
          />
        ))}
      </div>
      {selectedItem && (
        <div className="fixed p-4 inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <CharItemInfo 
            charItem={selectedItem} 
            onClose={() => setSelectedItem(null)} 
            character={character}
          />
        </div>
      )}
    </div>
  );
};

export default Inventory;

// Код файла components\Skills\Skills.js:
import React, { useState } from 'react';

const CategoryTab = ({ id, name, active, onClick }) => (
  <button
    className={`px-4 py-2 font-bold transition-colors duration-200 
      ${active ? 'bg-blue-500 text-white' : 'bg-gray-200 text-gray-700 hover:bg-gray-300'}
      first:rounded-tl-lg last:rounded-tr-lg`}
    onClick={() => onClick(id)}
  >
    {name}
  </button>
);

const SkillSlot = ({ skill }) => (
  <div className="aspect-square bg-white border border-gray-300 rounded-md flex flex-col justify-center items-center p-1 text-xs text-center">
    {skill && (
      <>
        <div className="font-bold mb-1 text-gray-800 truncate w-full">{skill.name}</div>
        <div className="text-gray-600">Ур. {skill.level}</div>
      </>
    )}
  </div>
);

const Skills = ({ skills }) => {
  const [activeCategory, setActiveCategory] = useState('all');

  const categories = [
    { id: 'all', name: 'Все' },
    { id: 'attack', name: 'Атака' },
    { id: 'defense', name: 'Защита' },
    { id: 'healing', name: 'Лечение' },
  ];

  const filteredSkills = skills.filter(skill => 
    activeCategory === 'all' || skill.category === activeCategory
  );

  return (
    <div>
      <div className="flex mt-4 overflow-auto">
        {categories.map(category => (
          <CategoryTab
            key={category.id}
            id={category.id}
            name={category.name}
            active={activeCategory === category.id}
            onClick={setActiveCategory}
          />
        ))}
      </div>
      <div className="grid grid-cols-4 sm:grid-cols-6 md:grid-cols-6 lg:grid-cols-6 gap-1 bg-gray-200 p-2 rounded-b-lg">
        {filteredSkills.map((skill, index) => (
          <SkillSlot key={index} skill={skill} />
        ))}
        {[...Array(24 - filteredSkills.length)].map((_, index) => (
          <SkillSlot key={`empty-${index}`} />
        ))}
      </div>
    </div>
  );
};

export default Skills;
