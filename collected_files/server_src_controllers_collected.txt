// Собранный код для папки server_src_controllers

// Код файла controllers\authController.js:
const User = require('../models/User');
const bcrypt = require('bcrypt');
const jwt = require('jsonwebtoken');

const handleError = (res, status, message) => {
  console.error(message);
  res.status(status).json({ message });
};

const generateToken = (userId) => jwt.sign({ id: userId }, process.env.JWT_SECRET, { expiresIn: '1h' });

const getUserData = (user) => ({
  id: user._id,
  username: user.username,
  email: user.email,
  role: user.role,
  hasCharacter: user.hasCharacter
});

exports.register = async (req, res) => {
  try {
    const { username, email, password } = req.body;
    
    // Проверяем, существует ли уже пользователь с таким именем или email
    const existingUser = await User.findOne({ $or: [{ username }, { email }] });
    if (existingUser) {
      return handleError(res, 400, 'Пользователь уже существует');
    }
    
    // Хешируем пароль
    const hashedPassword = await bcrypt.hash(password, 10);
    
    // Создаем нового пользователя
    const newUser = await User.create({
      username,
      email,
      password: hashedPassword,
      hasCharacter: false
    });
    
    // Генерируем токен
    const token = generateToken(newUser._id);
    
    res.status(201).json({ 
      message: 'Пользователь успешно зарегистрирован', 
      token,
      user: getUserData(newUser)
    });
  } catch (error) {
    handleError(res, 500, 'Ошибка сервера при регистрации');
  }
};

exports.login = async (req, res) => {
  try {
    const { username, password } = req.body;
    
    // Ищем пользователя
    const user = await User.findOne({ username });
    if (!user || !(await bcrypt.compare(password, user.password))) {
      return handleError(res, 400, 'Неверные учетные данные');
    }
    
    // Генерируем токен
    const token = generateToken(user._id);
    
    res.json({ token, user: getUserData(user) });
  } catch (error) {
    handleError(res, 400, 'Ошибка входа');
  }
};

exports.getCurrentUser = async (req, res) => {
  try {
    const user = await User.findById(req.user.id).select('-password');
    if (!user) {
      return handleError(res, 404, 'Пользователь не найден');
    }
    res.json(getUserData(user));
  } catch (error) {
    handleError(res, 500, 'Ошибка при получении данных пользователя');
  }
};

exports.makeAdmin = async (req, res) => {
  try {
    const user = await User.findByIdAndUpdate(req.user.id, { role: 'admin' }, { new: true });
    if (!user) {
      return handleError(res, 404, 'Пользователь не найден');
    }
    res.json({
      message: 'Роль пользователя обновлена до админа',
      user: getUserData(user)
    });
  } catch (error) {
    handleError(res, 500, 'Ошибка обновления роли пользователя');
  }
};

module.exports = exports;

// Код файла controllers\characterController.js:
const Character = require('../models/Character');
const User = require('../models/User');
const GameItem = require('../models/GameItem');
const CharItem = require('../models/CharItem');

const getFullCharacterData = async (character) => ({
  ...character.toObject(),
  healthData: character.getHealthData(),
  calculatedStats: character.getStatsData(),
  status: character.status
});

const getCurrentCharacter = async (userId) => {
  const character = await Character.findOne({ user: userId }).populate({
    path: 'inventory',
    populate: { path: 'gameItem' }
  });
  if (!character) throw new Error('Персонаж не найден');
  return character;
};

const handleError = (res, error, message) => {
  console.error(`${message}:`, error);
  res.status(400).json({ message, error: error.message });
};

exports.createCharacter = async (req, res) => {
  try {
    const { nickname, class: characterClass, baseStrength, baseDexterity, baseIntelligence, baseEndurance, baseCharisma } = req.body;
    
    const totalStats = baseStrength + baseDexterity + baseIntelligence + baseEndurance + baseCharisma;
    const baseStats = 50;
    const basePoints = 5;

    if (totalStats - baseStats > basePoints) throw new Error('Неверное распределение характеристик');
    if (await Character.findOne({ user: req.user._id })) throw new Error('У пользователя уже есть персонаж');

    const character = await Character.create({
      user: req.user._id,
      nickname,
      class: characterClass,
      baseStrength,
      baseDexterity,
      baseIntelligence,
      baseEndurance,
      baseCharisma,
      availablePoints: basePoints - (totalStats - baseStats)
    });

    await User.findByIdAndUpdate(req.user._id, { hasCharacter: true });
    res.status(201).json(await getFullCharacterData(character));
  } catch (error) {
    handleError(res, error, 'Ошибка создания персонажа');
  }
};

exports.getCharacter = async (req, res) => {
  try {
    const character = await getCurrentCharacter(req.user._id);
    res.json(await getFullCharacterData(character));
  } catch (error) {
    handleError(res, error, 'Ошибка при получении персонажа');
  }
};

exports.updateCharacter = async (req, res) => {
  try {
    const { baseStrength, baseDexterity, baseIntelligence, baseEndurance, baseCharisma, version } = req.body;
    const character = await getCurrentCharacter(req.user._id);

    if (character.version !== version) throw new Error('Конфликт версий. Обновите данные и попробуйте снова.');
    if (character.zeroPoints) throw new Error('Распределение очков уже завершено');

    const newTotalStats = baseStrength + baseDexterity + baseIntelligence + baseEndurance + baseCharisma;
    const oldTotalStats = character.baseStrength + character.baseDexterity + character.baseIntelligence + character.baseEndurance + character.baseCharisma;
    const pointsSpent = newTotalStats - oldTotalStats;

    if (pointsSpent > character.availablePoints || pointsSpent < 0) throw new Error('Недопустимое распределение очков');

    Object.assign(character, { baseStrength, baseDexterity, baseIntelligence, baseEndurance, baseCharisma, availablePoints: character.availablePoints - pointsSpent });
    await character.save();
    
    res.json(await getFullCharacterData(character));
  } catch (error) {
    handleError(res, error, 'Ошибка обновления персонажа');
  }
};

exports.equipCharItem = async (req, res) => {
  try {
    const { charItemId } = req.body;
    const character = await getCurrentCharacter(req.user._id);

    const charItemToEquip = character.inventory.find(charItem => charItem._id.toString() === charItemId);
    if (!charItemToEquip || !charItemToEquip.gameItem) throw new Error('Предмет не найден в инвентаре или не содержит данных gameItem');

    const gameItemType = charItemToEquip.gameItem.type;

    if (charItemToEquip.isEquipped) {
      charItemToEquip.isEquipped = false;
      charItemToEquip.slot = null;
    } else {
      if (gameItemType === 'useful') {
        const usefulSlots = ['useful1', 'useful2', 'useful3'];
        const emptySlot = usefulSlots.find(slot => !character.inventory.some(charItem => charItem.isEquipped && charItem.slot === slot));
        
        if (emptySlot) {
          charItemToEquip.slot = emptySlot;
        } else {
          const charItemInThirdSlot = character.inventory.find(charItem => charItem.isEquipped && charItem.slot === 'useful3');
          if (charItemInThirdSlot) {
            Object.assign(charItemInThirdSlot, { isEquipped: false, slot: null });
            await charItemInThirdSlot.save();
          }
          charItemToEquip.slot = 'useful3';
        }
      } else {
        const equippedCharItem = character.inventory.find(charItem => 
          charItem.isEquipped && charItem.gameItem && charItem.gameItem.type === gameItemType
        );
        if (equippedCharItem) {
          Object.assign(equippedCharItem, { isEquipped: false, slot: null });
          await equippedCharItem.save();
        }
        charItemToEquip.slot = gameItemType;
      }
      
      charItemToEquip.isEquipped = true;
    }

    await charItemToEquip.save();
    await character.save();

    res.json(await getFullCharacterData(character));
  } catch (error) {
    handleError(res, error, 'Ошибка экипировки предмета');
  }
};

exports.addItemToInventory = async (req, res) => {
  try {
    const { gameItemId, quantity = 1 } = req.body;
    const character = await getCurrentCharacter(req.user._id);

    const gameItem = await GameItem.findById(gameItemId);
    if (!gameItem) throw new Error('Игровой предмет не найден');

    let charItem = await CharItem.findOne({ character: character._id, gameItem: gameItemId, isEquipped: false });
    if (charItem) {
      charItem.quantity += quantity;
    } else {
      charItem = new CharItem({ character: character._id, gameItem: gameItemId, quantity });
    }

    await charItem.save();
    character.inventory.push(charItem._id);
    await character.save();

    res.json(await getFullCharacterData(character));
  } catch (error) {
    handleError(res, error, 'Ошибка добавления предмета в инвентарь');
  }
};

exports.getHealthData = async (req, res) => {
  try {
    const character = await getCurrentCharacter(req.user._id);
    res.json(character.getHealthData());
  } catch (error) {
    handleError(res, error, 'Ошибка при получении данных о здоровье');
  }
};

exports.damageCharacter = async (req, res) => {
  try {
    const { damage } = req.body;
    const character = await getCurrentCharacter(req.user._id);

    character.updateHealth(Math.max(0, character.getCurrentHealth() - damage));
    await character.save();

    res.json(character.getHealthData());
  } catch (error) {
    handleError(res, error, 'Ошибка при нанесении урона персонажу');
  }
};

module.exports = exports;

// Код файла controllers\charItemController.js:
const CharItem = require('../models/CharItem');
const Character = require('../models/Character');
const GameItem = require('../models/GameItem');

const handleError = (res, status, message) => {
  console.error(message);
  res.status(status).json({ message });
};

exports.createCharItem = async (req, res) => {
  try {
    const { gameItemId, characterId, quantity } = req.body;
    
    const [character, gameItem] = await Promise.all([
      Character.findById(characterId),
      GameItem.findById(gameItemId)
    ]);

    if (!character) {
      return handleError(res, 404, 'Персонаж не найден');
    }
    if (!gameItem) {
      return handleError(res, 404, 'Игровой предмет не найден');
    }

    const charItem = await CharItem.create({
      gameItem: gameItemId,
      character: characterId,
      quantity: quantity || 1
    });

    character.inventory.push(charItem._id);
    await character.save();

    res.status(201).json(charItem);
  } catch (error) {
    handleError(res, 400, 'Ошибка создания предмета персонажа');
  }
};

exports.getCharItemById = async (req, res) => {
  try {
    const charItem = await CharItem.findById(req.params.id).populate('gameItem');
    if (!charItem) {
      return handleError(res, 404, 'Предмет не найден');
    }
    res.json(charItem);
  } catch (error) {
    handleError(res, 400, 'Ошибка получения предмета');
  }
};

exports.updateCharItem = async (req, res) => {
  try {
    const { quantity, isEquipped, slot } = req.body;
    const charItem = await CharItem.findByIdAndUpdate(
      req.params.id,
      { quantity, isEquipped, slot },
      { new: true, runValidators: true }
    );
    
    if (!charItem) {
      return handleError(res, 404, 'Предмет не найден');
    }

    res.json(charItem);
  } catch (error) {
    handleError(res, 400, 'Ошибка обновления предмета');
  }
};

exports.deleteCharItem = async (req, res) => {
  try {
    const charItem = await CharItem.findById(req.params.id);
    if (!charItem) {
      return handleError(res, 404, 'Предмет не найден');
    }

    const character = await Character.findById(charItem.character);
    if (character) {
      // Удаляем предмет из инвентаря персонажа
      character.inventory = character.inventory.filter(item => item.toString() !== charItem._id.toString());
      await character.save();
    }

    // Удаляем сам предмет
    await CharItem.findByIdAndDelete(req.params.id);
    res.json({ message: 'Предмет успешно удален' });
  } catch (error) {
    handleError(res, 400, 'Ошибка удаления предмета');
  }
};

module.exports = exports;

// Код файла controllers\combatController.js:
 


// Код файла controllers\gameItemController.js:
const GameItem = require('../models/GameItem');
const Character = require('../models/Character');
const CharItem = require('../models/CharItem');

const handleError = (res, error, message) => {
  console.error(`${message}:`, error);
  res.status(400).json({ message, error: error.message });
};

const getGameItem = async (id) => {
  const gameItem = await GameItem.findById(id);
  if (!gameItem) throw new Error('Игровой предмет не найден');
  return gameItem;
};

exports.createGameItem = async (req, res) => {
  try {
    const gameItem = await GameItem.create(req.body);
    res.status(201).json(gameItem);
  } catch (error) {
    handleError(res, error, 'Ошибка создания игрового предмета');
  }
};

exports.getAllGameItems = async (req, res) => {
  try {
    const gameItems = await GameItem.find();
    res.json(gameItems);
  } catch (error) {
    handleError(res, error, 'Ошибка получения игровых предметов');
  }
};

exports.getGameItemById = async (req, res) => {
  try {
    const gameItem = await getGameItem(req.params.id);
    res.json(gameItem);
  } catch (error) {
    handleError(res, error, 'Ошибка получения игрового предмета');
  }
};

exports.updateGameItem = async (req, res) => {
  try {
    const gameItem = await GameItem.findByIdAndUpdate(req.params.id, req.body, { new: true });
    if (!gameItem) throw new Error('Игровой предмет не найден');
    res.json(gameItem);
  } catch (error) {
    handleError(res, error, 'Ошибка обновления игрового предмета');
  }
};

exports.deleteGameItem = async (req, res) => {
  try {
    const gameItem = await GameItem.findByIdAndDelete(req.params.id);
    if (!gameItem) throw new Error('Игровой предмет не найден');
    res.json({ message: 'Игровой предмет успешно удален' });
  } catch (error) {
    handleError(res, error, 'Ошибка удаления игрового предмета');
  }
};

exports.sendGameItem = async (req, res) => {
  try {
    const { gameItemId, characterId } = req.params;
    const [gameItem, character] = await Promise.all([
      getGameItem(gameItemId),
      Character.findById(characterId)
    ]);
    
    if (!character) throw new Error('Персонаж не найден');
    
    const charItem = await CharItem.create({
      gameItem: gameItem._id,
      character: character._id,
      quantity: 1,
      isEquipped: false,
      slot: null
    });
    
    character.inventory.push(charItem._id);
    await character.save();
    
    res.json({ message: 'Игровой предмет успешно отправлен персонажу', character });
  } catch (error) {
    handleError(res, error, 'Ошибка отправки игрового предмета');
  }
};

module.exports = exports;

// Код файла controllers\inventoryController.js:
 


// Код файла controllers\skillController.js:
 


// Код файла controllers\statusController.js:
const Character = require('../models/Character');

exports.updateStatus = async (req, res) => {
  try {
    const { statusType, newStatus } = req.body;
    const character = await Character.findOne({ user: req.user._id });
    
    if (!character) {
      return res.status(404).json({ message: 'Character not found' });
    }

    character.status[statusType] = newStatus;
    await character.save();

    res.json({ status: character.status });
  } catch (error) {
    res.status(400).json({ message: 'Error updating status', error: error.message });
  }
};

exports.getStatus = async (req, res) => {
  try {
    const character = await Character.findOne({ user: req.user._id });
    
    if (!character) {
      return res.status(404).json({ message: 'Character not found' });
    }

    res.json({ status: character.status });
  } catch (error) {
    res.status(400).json({ message: 'Error getting status', error: error.message });
  }
};
